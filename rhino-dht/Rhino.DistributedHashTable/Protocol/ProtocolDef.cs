// Generated by the protocol buffer compiler.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Rhino.DistributedHashTable.Protocol {
  
  public static partial class ProtocolDef {
  
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static readonly pbd::FileDescriptor descriptor = pbd::FileDescriptor.InternalBuildGeneratedFileFrom(
        global::System.Convert.FromBase64String(
        "ChFQcm90b2NvbERlZi5wcm90bxIjUmhpbm8uRGlzdHJpYnV0ZWRIYXNoVGFi" + 
        "bGUuUHJvdG9jb2wimgIKBVZhbHVlEgsKA0tleRgBIAIoCRIZChFUaW1lU3Rh" + 
        "bXBBc0RvdWJsZRgCIAIoARJCCgdWZXJzaW9uGAMgAigLMjEuUmhpbm8uRGlz" + 
        "dHJpYnV0ZWRIYXNoVGFibGUuUHJvdG9jb2wuVmFsdWVWZXJzaW9uEhAKCFJl" + 
        "YWRPbmx5GAUgAigIEgwKBERhdGEYBiACKAwSEgoKU2hhMjU2SGFzaBgHIAIo" + 
        "DBJJCg5QYXJlbnRWZXJzaW9ucxgIIAMoCzIxLlJoaW5vLkRpc3RyaWJ1dGVk" + 
        "SGFzaFRhYmxlLlByb3RvY29sLlZhbHVlVmVyc2lvbhIZChFFeHBpcmVzQXRB" + 
        "c0RvdWJsZRgKIAEoARILCgNUYWcYCyABKAUiKwoMTm9kZUVuZHBvaW50EgwK" + 
        "BFN5bmMYASACKAkSDQoFQXN5bmMYAiACKAkiMgoMVmFsdWVWZXJzaW9uEg4K" + 
        "Bk51bWJlchgBIAIoBRISCgpJbnN0YW5jZUlkGAIgAigMIswCCgdTZWdtZW50" + 
        "Eg0KBUluZGV4GAEgAigFEksKEEFzc2lnbmVkRW5kcG9pbnQYAiABKAsyMS5S" + 
        "aGluby5EaXN0cmlidXRlZEhhc2hUYWJsZS5Qcm90b2NvbC5Ob2RlRW5kcG9p" + 
        "bnQSVgobSW5Qcm9jZXNzT2ZNb3ZpbmdUb0VuZHBvaW50GAMgASgLMjEuUmhp" + 
        "bm8uRGlzdHJpYnV0ZWRIYXNoVGFibGUuUHJvdG9jb2wuTm9kZUVuZHBvaW50" + 
        "EkkKDlBlbmRpbmdCYWNrdXBzGAQgAygLMjEuUmhpbm8uRGlzdHJpYnV0ZWRI" + 
        "YXNoVGFibGUuUHJvdG9jb2wuTm9kZUVuZHBvaW50EkIKB0JhY2t1cHMYBSAD" + 
        "KAsyMS5SaGluby5EaXN0cmlidXRlZEhhc2hUYWJsZS5Qcm90b2NvbC5Ob2Rl" + 
        "RW5kcG9pbnQiYAoSSm9pblJlcXVlc3RNZXNzYWdlEkoKD0VuZHBvaW50Sm9p" + 
        "bmluZxgBIAIoCzIxLlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlByb3Rv" + 
        "Y29sLk5vZGVFbmRwb2ludCJVChNKb2luUmVzcG9uc2VNZXNzYWdlEj4KCFNl" + 
        "Z21lbnRzGAEgAygLMiwuUmhpbm8uRGlzdHJpYnV0ZWRIYXNoVGFibGUuUHJv" + 
        "dG9jb2wuU2VnbWVudCKDAQoVVG9wb2xvZ3lSZXN1bHRNZXNzYWdlEhkKEVRp" + 
        "bWVzdGFtcEFzRG91YmxlGAEgAigBEg8KB1ZlcnNpb24YAiACKAUSPgoIU2Vn" + 
        "bWVudHMYAyADKAsyLC5SaGluby5EaXN0cmlidXRlZEhhc2hUYWJsZS5Qcm90" + 
        "b2NvbC5TZWdtZW50IrsBChZDYXVnaHRVcFJlcXVlc3RNZXNzYWdlEkMKCEVu" + 
        "ZHBvaW50GAEgAigLMjEuUmhpbm8uRGlzdHJpYnV0ZWRIYXNoVGFibGUuUHJv" + 
        "dG9jb2wuTm9kZUVuZHBvaW50EhgKEENhdWdodFVwU2VnbWVudHMYAiADKAUS" + 
        "QgoEVHlwZRgDIAIoDjI0LlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlBy" + 
        "b3RvY29sLlJlcGxpY2F0aW9uVHlwZSK3AQoUR2F2ZVVwUmVxdWVzdE1lc3Nh" + 
        "Z2USQwoIRW5kcG9pbnQYASACKAsyMS5SaGluby5EaXN0cmlidXRlZEhhc2hU" + 
        "YWJsZS5Qcm90b2NvbC5Ob2RlRW5kcG9pbnQSFgoOR2F2ZVVwU2VnbWVudHMY" + 
        "AiADKAUSQgoEVHlwZRgDIAIoDjI0LlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRh" + 
        "YmxlLlByb3RvY29sLlJlcGxpY2F0aW9uVHlwZSJ9ChFHZXRSZXF1ZXN0TWVz" + 
        "c2FnZRILCgNLZXkYASACKAkSDwoHU2VnbWVudBgCIAIoBRJKCg9TcGVjaWZp" + 
        "Y1ZlcnNpb24YAyABKAsyMS5SaGluby5EaXN0cmlidXRlZEhhc2hUYWJsZS5Q" + 
        "cm90b2NvbC5WYWx1ZVZlcnNpb24iUAoSR2V0UmVzcG9uc2VNZXNzYWdlEjoK" + 
        "BlZhbHVlcxgBIAMoCzIqLlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlBy" + 
        "b3RvY29sLlZhbHVlIp4BChRSZW1vdmVSZXF1ZXN0TWVzc2FnZRILCgNLZXkY" + 
        "ASACKAkSDwoHU2VnbWVudBgCIAIoBRIcChRJc1JlcGxpY2F0aW9uUmVxdWVz" + 
        "dBgEIAIoCBJKCg9TcGVjaWZpY1ZlcnNpb24YAyABKAsyMS5SaGluby5EaXN0" + 
        "cmlidXRlZEhhc2hUYWJsZS5Qcm90b2NvbC5WYWx1ZVZlcnNpb24i+QIKEVB1" + 
        "dFJlcXVlc3RNZXNzYWdlEgsKA0tleRgBIAIoCRIPCgdTZWdtZW50GAIgAigF" + 
        "EkkKDlBhcmVudFZlcnNpb25zGAMgAygLMjEuUmhpbm8uRGlzdHJpYnV0ZWRI" + 
        "YXNoVGFibGUuUHJvdG9jb2wuVmFsdWVWZXJzaW9uEh0KFU9wdGltaXN0aWND" + 
        "b25jdXJyZW5jeRgEIAIoCBISCgpJc1JlYWRPbmx5GAUgAigIEg0KBUJ5dGVz" + 
        "GAYgAigMEhwKFElzUmVwbGljYXRpb25SZXF1ZXN0GAsgAigIEk0KElJlcGxp" + 
        "Y2F0aW9uVmVyc2lvbhgHIAEoCzIxLlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRh" + 
        "YmxlLlByb3RvY29sLlZhbHVlVmVyc2lvbhIZChFFeHBpcmVzQXRBc0RvdWJs" + 
        "ZRgIIAEoARIkChxSZXBsaWNhdGlvblRpbWVTdGFtcEFzRG91YmxlGAkgASgB" + 
        "EgsKA1RhZxgKIAEoBSJwChJQdXRSZXNwb25zZU1lc3NhZ2USQgoHVmVyc2lv" + 
        "bhgBIAIoCzIxLlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlByb3RvY29s" + 
        "LlZhbHVlVmVyc2lvbhIWCg5Db25mbGljdEV4aXN0cxgCIAIoCCIrChVSZW1v" + 
        "dmVSZXNwb25zZU1lc3NhZ2USEgoKV2FzUmVtb3ZlZBgBIAIoCCIfCgxFcnJv" + 
        "ck1lc3NhZ2USDwoHTWVzc2FnZRgBIAIoCSLMAQokQXNzaWduQWxsRW1wdHlT" + 
        "ZWdtZW50c1JlcXVlc3RNZXNzYWdlEk4KE1JlcGxpY2F0aW9uRW5kcG9pbnQY" + 
        "ASACKAsyMS5SaGluby5EaXN0cmlidXRlZEhhc2hUYWJsZS5Qcm90b2NvbC5O" + 
        "b2RlRW5kcG9pbnQSEAoIU2VnbWVudHMYAiADKAUSQgoEVHlwZRgDIAIoDjI0" + 
        "LlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlByb3RvY29sLlJlcGxpY2F0" + 
        "aW9uVHlwZSJBCiVBc3NpZ25BbGxFbXB0eVNlZ21lbnRzUmVzcG9uc2VNZXNz" + 
        "YWdlEhgKEEFzc2lnbmVkU2VnbWVudHMYAiADKAUixgEKH1JlcGxpY2F0ZU5l" + 
        "eHRQYWdlUmVxdWVzdE1lc3NhZ2USTgoTUmVwbGljYXRpb25FbmRwb2ludBgB" + 
        "IAIoCzIxLlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlByb3RvY29sLk5v" + 
        "ZGVFbmRwb2ludBIPCgdTZWdtZW50GAIgAigFEkIKBFR5cGUYAyACKA4yNC5S" + 
        "aGluby5EaXN0cmlidXRlZEhhc2hUYWJsZS5Qcm90b2NvbC5SZXBsaWNhdGlv" + 
        "blR5cGUi0AEKIFJlcGxpY2F0ZU5leHRQYWdlUmVzcG9uc2VNZXNzYWdlEgwK" + 
        "BERvbmUYASACKAgSUQoOUmVtb3ZlUmVxdWVzdHMYAiADKAsyOS5SaGluby5E" + 
        "aXN0cmlidXRlZEhhc2hUYWJsZS5Qcm90b2NvbC5SZW1vdmVSZXF1ZXN0TWVz" + 
        "c2FnZRJLCgtQdXRSZXF1ZXN0cxgDIAMoCzI2LlJoaW5vLkRpc3RyaWJ1dGVk" + 
        "SGFzaFRhYmxlLlByb3RvY29sLlB1dFJlcXVlc3RNZXNzYWdlIlgKFFNlZU90" + 
        "aGVyRXJyb3JNZXNzYWdlEkAKBU90aGVyGAEgAigLMjEuUmhpbm8uRGlzdHJp" + 
        "YnV0ZWRIYXNoVGFibGUuUHJvdG9jb2wuTm9kZUVuZHBvaW50IqYEChJNYXN0" + 
        "ZXJNZXNzYWdlVW5pb24SRAoEVHlwZRgBIAIoDjI2LlJoaW5vLkRpc3RyaWJ1" + 
        "dGVkSGFzaFRhYmxlLlByb3RvY29sLk1hc3Rlck1lc3NhZ2VUeXBlEkwKC0pv" + 
        "aW5SZXF1ZXN0GAIgASgLMjcuUmhpbm8uRGlzdHJpYnV0ZWRIYXNoVGFibGUu" + 
        "UHJvdG9jb2wuSm9pblJlcXVlc3RNZXNzYWdlEk4KDEpvaW5SZXNwb25zZRgD" + 
        "IAEoCzI4LlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlByb3RvY29sLkpv" + 
        "aW5SZXNwb25zZU1lc3NhZ2USTAoIVG9wb2xvZ3kYBCABKAsyOi5SaGluby5E" + 
        "aXN0cmlidXRlZEhhc2hUYWJsZS5Qcm90b2NvbC5Ub3BvbG9neVJlc3VsdE1l" + 
        "c3NhZ2USRAoJRXhjZXB0aW9uGAUgASgLMjEuUmhpbm8uRGlzdHJpYnV0ZWRI" + 
        "YXNoVGFibGUuUHJvdG9jb2wuRXJyb3JNZXNzYWdlEk0KCENhdWdodFVwGAYg" + 
        "ASgLMjsuUmhpbm8uRGlzdHJpYnV0ZWRIYXNoVGFibGUuUHJvdG9jb2wuQ2F1" + 
        "Z2h0VXBSZXF1ZXN0TWVzc2FnZRJJCgZHYXZlVXAYByABKAsyOS5SaGluby5E" + 
        "aXN0cmlidXRlZEhhc2hUYWJsZS5Qcm90b2NvbC5HYXZlVXBSZXF1ZXN0TWVz" + 
        "c2FnZSKkCQoTU3RvcmFnZU1lc3NhZ2VVbmlvbhJFCgRUeXBlGAEgAigOMjcu" + 
        "Umhpbm8uRGlzdHJpYnV0ZWRIYXNoVGFibGUuUHJvdG9jb2wuU3RvcmFnZU1l" + 
        "c3NhZ2VUeXBlEhcKD1RvcG9sb2d5VmVyc2lvbhgCIAEoBRJLCgtHZXRSZXF1" + 
        "ZXN0cxgDIAMoCzI2LlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlByb3Rv" + 
        "Y29sLkdldFJlcXVlc3RNZXNzYWdlEksKC1B1dFJlcXVlc3RzGAQgAygLMjYu" + 
        "Umhpbm8uRGlzdHJpYnV0ZWRIYXNoVGFibGUuUHJvdG9jb2wuUHV0UmVxdWVz" + 
        "dE1lc3NhZ2USTQoMUHV0UmVzcG9uc2VzGAcgAygLMjcuUmhpbm8uRGlzdHJp" + 
        "YnV0ZWRIYXNoVGFibGUuUHJvdG9jb2wuUHV0UmVzcG9uc2VNZXNzYWdlElEK" + 
        "DlJlbW92ZVJlcXVlc3RzGAUgAygLMjkuUmhpbm8uRGlzdHJpYnV0ZWRIYXNo" + 
        "VGFibGUuUHJvdG9jb2wuUmVtb3ZlUmVxdWVzdE1lc3NhZ2USUgoOUmVtb3Zl" + 
        "UmVzcG9uZXMYCCADKAsyOi5SaGluby5EaXN0cmlidXRlZEhhc2hUYWJsZS5Q" + 
        "cm90b2NvbC5SZW1vdmVSZXNwb25zZU1lc3NhZ2USTQoMR2V0UmVzcG9uc2Vz" + 
        "GAYgAygLMjcuUmhpbm8uRGlzdHJpYnV0ZWRIYXNoVGFibGUuUHJvdG9jb2wu" + 
        "R2V0UmVzcG9uc2VNZXNzYWdlEkQKCUV4Y2VwdGlvbhgJIAEoCzIxLlJoaW5v" + 
        "LkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlByb3RvY29sLkVycm9yTWVzc2FnZRJw" + 
        "Ch1Bc3NpZ25BbGxFbXB0eVNlZ21lbnRzUmVxdWVzdBgKIAEoCzJJLlJoaW5v" + 
        "LkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlByb3RvY29sLkFzc2lnbkFsbEVtcHR5" + 
        "U2VnbWVudHNSZXF1ZXN0TWVzc2FnZRJyCh5Bc3NpZ25BbGxFbXB0eVNlZ21l" + 
        "bnRzUmVzcG9uc2UYCyABKAsySi5SaGluby5EaXN0cmlidXRlZEhhc2hUYWJs" + 
        "ZS5Qcm90b2NvbC5Bc3NpZ25BbGxFbXB0eVNlZ21lbnRzUmVzcG9uc2VNZXNz" + 
        "YWdlEmYKGFJlcGxpY2F0ZU5leHRQYWdlUmVxdWVzdBgMIAEoCzJELlJoaW5v" + 
        "LkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlByb3RvY29sLlJlcGxpY2F0ZU5leHRQ" + 
        "YWdlUmVxdWVzdE1lc3NhZ2USaAoZUmVwbGljYXRlTmV4dFBhZ2VSZXNwb25z" + 
        "ZRgNIAEoCzJFLlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlByb3RvY29s" + 
        "LlJlcGxpY2F0ZU5leHRQYWdlUmVzcG9uc2VNZXNzYWdlElAKDVNlZU90aGVy" + 
        "RXJyb3IYDiABKAsyOS5SaGluby5EaXN0cmlidXRlZEhhc2hUYWJsZS5Qcm90" + 
        "b2NvbC5TZWVPdGhlckVycm9yTWVzc2FnZSr1AgoSU3RvcmFnZU1lc3NhZ2VU" + 
        "eXBlEg8KC0dldFJlcXVlc3RzEAESDwoLUHV0UmVxdWVzdHMQAhISCg5SZW1v" + 
        "dmVSZXF1ZXN0cxADEhAKDEdldFJlc3BvbnNlcxAEEhAKDFB1dFJlc3BvbnNl" + 
        "cxAFEhMKD1JlbW92ZVJlc3BvbnNlcxAGEhYKElN0b3JhZ2VFcnJvclJlc3Vs" + 
        "dBAHEiEKHUFzc2lnbkFsbEVtcHR5U2VnbWVudHNSZXF1ZXN0EAgSIgoeQXNz" + 
        "aWduQWxsRW1wdHlTZWdtZW50c1Jlc3BvbnNlEAkSHAoYUmVwbGljYXRlTmV4" + 
        "dFBhZ2VSZXF1ZXN0EAoSHQoZUmVwbGljYXRlTmV4dFBhZ2VSZXNwb25zZRAL" + 
        "EhEKDVNlZU90aGVyRXJyb3IQDBIYChRUb3BvbG9neUNoYW5nZWRFcnJvchAN" + 
        "EhIKDlVwZGF0ZVRvcG9sb2d5EA4SEwoPVG9wb2xvZ3lVcGRhdGVkEA8qzAEK" + 
        "EU1hc3Rlck1lc3NhZ2VUeXBlEhYKEkdldFRvcG9sb2d5UmVxdWVzdBABEhUK" + 
        "EUdldFRvcG9sb2d5UmVzdWx0EAISDwoLSm9pblJlcXVlc3QQAxIOCgpKb2lu" + 
        "UmVzdWx0EAQSFQoRTWFzdGVyRXJyb3JSZXN1bHQQBRITCg9DYXVnaHRVcFJl" + 
        "cXVlc3QQBhIUChBDYXVnaHRVcFJlc3BvbnNlEAcSEQoNR2F2ZVVwUmVxdWVz" + 
        "dBAIEhIKDkdhdmVVcFJlc3BvbnNlEAkqLAoPUmVwbGljYXRpb25UeXBlEg0K" + 
        "CU93bmVyc2hpcBABEgoKBkJhY2t1cBACQgJIAQ=="),
        new pbd::FileDescriptor[] {
        });
    #endregion
    
    #region Static variables
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_Value__Descriptor
        = Descriptor.MessageTypes[0];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.Value, global::Rhino.DistributedHashTable.Protocol.Value.Builder> internal__static_Rhino_DistributedHashTable_Protocol_Value__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.Value, global::Rhino.DistributedHashTable.Protocol.Value.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_Value__Descriptor,
            new string[] { "Key", "TimeStampAsDouble", "Version", "ReadOnly", "Data", "Sha256Hash", "ParentVersions", "ExpiresAtAsDouble", "Tag", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_NodeEndpoint__Descriptor
        = Descriptor.MessageTypes[1];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint, global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder> internal__static_Rhino_DistributedHashTable_Protocol_NodeEndpoint__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint, global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_NodeEndpoint__Descriptor,
            new string[] { "Sync", "Async", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_ValueVersion__Descriptor
        = Descriptor.MessageTypes[2];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.ValueVersion, global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder> internal__static_Rhino_DistributedHashTable_Protocol_ValueVersion__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.ValueVersion, global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_ValueVersion__Descriptor,
            new string[] { "Number", "InstanceId", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_Segment__Descriptor
        = Descriptor.MessageTypes[3];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.Segment, global::Rhino.DistributedHashTable.Protocol.Segment.Builder> internal__static_Rhino_DistributedHashTable_Protocol_Segment__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.Segment, global::Rhino.DistributedHashTable.Protocol.Segment.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_Segment__Descriptor,
            new string[] { "Index", "AssignedEndpoint", "InProcessOfMovingToEndpoint", "PendingBackups", "Backups", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_JoinRequestMessage__Descriptor
        = Descriptor.MessageTypes[4];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage, global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_JoinRequestMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage, global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_JoinRequestMessage__Descriptor,
            new string[] { "EndpointJoining", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_JoinResponseMessage__Descriptor
        = Descriptor.MessageTypes[5];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage, global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_JoinResponseMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage, global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_JoinResponseMessage__Descriptor,
            new string[] { "Segments", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_TopologyResultMessage__Descriptor
        = Descriptor.MessageTypes[6];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage, global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_TopologyResultMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage, global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_TopologyResultMessage__Descriptor,
            new string[] { "TimestampAsDouble", "Version", "Segments", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_CaughtUpRequestMessage__Descriptor
        = Descriptor.MessageTypes[7];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage, global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_CaughtUpRequestMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage, global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_CaughtUpRequestMessage__Descriptor,
            new string[] { "Endpoint", "CaughtUpSegments", "Type", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_GaveUpRequestMessage__Descriptor
        = Descriptor.MessageTypes[8];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage, global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_GaveUpRequestMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage, global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_GaveUpRequestMessage__Descriptor,
            new string[] { "Endpoint", "GaveUpSegments", "Type", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_GetRequestMessage__Descriptor
        = Descriptor.MessageTypes[9];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.GetRequestMessage, global::Rhino.DistributedHashTable.Protocol.GetRequestMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_GetRequestMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.GetRequestMessage, global::Rhino.DistributedHashTable.Protocol.GetRequestMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_GetRequestMessage__Descriptor,
            new string[] { "Key", "Segment", "SpecificVersion", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_GetResponseMessage__Descriptor
        = Descriptor.MessageTypes[10];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.GetResponseMessage, global::Rhino.DistributedHashTable.Protocol.GetResponseMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_GetResponseMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.GetResponseMessage, global::Rhino.DistributedHashTable.Protocol.GetResponseMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_GetResponseMessage__Descriptor,
            new string[] { "Values", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_RemoveRequestMessage__Descriptor
        = Descriptor.MessageTypes[11];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage, global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_RemoveRequestMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage, global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_RemoveRequestMessage__Descriptor,
            new string[] { "Key", "Segment", "IsReplicationRequest", "SpecificVersion", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_PutRequestMessage__Descriptor
        = Descriptor.MessageTypes[12];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.PutRequestMessage, global::Rhino.DistributedHashTable.Protocol.PutRequestMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_PutRequestMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.PutRequestMessage, global::Rhino.DistributedHashTable.Protocol.PutRequestMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_PutRequestMessage__Descriptor,
            new string[] { "Key", "Segment", "ParentVersions", "OptimisticConcurrency", "IsReadOnly", "Bytes", "IsReplicationRequest", "ReplicationVersion", "ExpiresAtAsDouble", "ReplicationTimeStampAsDouble", "Tag", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_PutResponseMessage__Descriptor
        = Descriptor.MessageTypes[13];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.PutResponseMessage, global::Rhino.DistributedHashTable.Protocol.PutResponseMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_PutResponseMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.PutResponseMessage, global::Rhino.DistributedHashTable.Protocol.PutResponseMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_PutResponseMessage__Descriptor,
            new string[] { "Version", "ConflictExists", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_RemoveResponseMessage__Descriptor
        = Descriptor.MessageTypes[14];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage, global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_RemoveResponseMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage, global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_RemoveResponseMessage__Descriptor,
            new string[] { "WasRemoved", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_ErrorMessage__Descriptor
        = Descriptor.MessageTypes[15];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.ErrorMessage, global::Rhino.DistributedHashTable.Protocol.ErrorMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_ErrorMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.ErrorMessage, global::Rhino.DistributedHashTable.Protocol.ErrorMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_ErrorMessage__Descriptor,
            new string[] { "Message", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_AssignAllEmptySegmentsRequestMessage__Descriptor
        = Descriptor.MessageTypes[16];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage, global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_AssignAllEmptySegmentsRequestMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage, global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_AssignAllEmptySegmentsRequestMessage__Descriptor,
            new string[] { "ReplicationEndpoint", "Segments", "Type", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_AssignAllEmptySegmentsResponseMessage__Descriptor
        = Descriptor.MessageTypes[17];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage, global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_AssignAllEmptySegmentsResponseMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage, global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_AssignAllEmptySegmentsResponseMessage__Descriptor,
            new string[] { "AssignedSegments", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_ReplicateNextPageRequestMessage__Descriptor
        = Descriptor.MessageTypes[18];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage, global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_ReplicateNextPageRequestMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage, global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_ReplicateNextPageRequestMessage__Descriptor,
            new string[] { "ReplicationEndpoint", "Segment", "Type", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_ReplicateNextPageResponseMessage__Descriptor
        = Descriptor.MessageTypes[19];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage, global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_ReplicateNextPageResponseMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage, global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_ReplicateNextPageResponseMessage__Descriptor,
            new string[] { "Done", "RemoveRequests", "PutRequests", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_SeeOtherErrorMessage__Descriptor
        = Descriptor.MessageTypes[20];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage, global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_SeeOtherErrorMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage, global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_SeeOtherErrorMessage__Descriptor,
            new string[] { "Other", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_MasterMessageUnion__Descriptor
        = Descriptor.MessageTypes[21];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.MasterMessageUnion, global::Rhino.DistributedHashTable.Protocol.MasterMessageUnion.Builder> internal__static_Rhino_DistributedHashTable_Protocol_MasterMessageUnion__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.MasterMessageUnion, global::Rhino.DistributedHashTable.Protocol.MasterMessageUnion.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_MasterMessageUnion__Descriptor,
            new string[] { "Type", "JoinRequest", "JoinResponse", "Topology", "Exception", "CaughtUp", "GaveUp", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_StorageMessageUnion__Descriptor
        = Descriptor.MessageTypes[22];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.StorageMessageUnion, global::Rhino.DistributedHashTable.Protocol.StorageMessageUnion.Builder> internal__static_Rhino_DistributedHashTable_Protocol_StorageMessageUnion__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.StorageMessageUnion, global::Rhino.DistributedHashTable.Protocol.StorageMessageUnion.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_StorageMessageUnion__Descriptor,
            new string[] { "Type", "TopologyVersion", "GetRequests", "PutRequests", "PutResponses", "RemoveRequests", "RemoveRespones", "GetResponses", "Exception", "AssignAllEmptySegmentsRequest", "AssignAllEmptySegmentsResponse", "ReplicateNextPageRequest", "ReplicateNextPageResponse", "SeeOtherError", });
    #endregion
  }
  #region Enums
  public enum StorageMessageType {
    GetRequests = 1,
    PutRequests = 2,
    RemoveRequests = 3,
    GetResponses = 4,
    PutResponses = 5,
    RemoveResponses = 6,
    StorageErrorResult = 7,
    AssignAllEmptySegmentsRequest = 8,
    AssignAllEmptySegmentsResponse = 9,
    ReplicateNextPageRequest = 10,
    ReplicateNextPageResponse = 11,
    SeeOtherError = 12,
    TopologyChangedError = 13,
    UpdateTopology = 14,
    TopologyUpdated = 15,
  }
  
  public enum MasterMessageType {
    GetTopologyRequest = 1,
    GetTopologyResult = 2,
    JoinRequest = 3,
    JoinResult = 4,
    MasterErrorResult = 5,
    CaughtUpRequest = 6,
    CaughtUpResponse = 7,
    GaveUpRequest = 8,
    GaveUpResponse = 9,
  }
  
  public enum ReplicationType {
    Ownership = 1,
    Backup = 2,
  }
  
  #endregion
  
  #region Messages
  public sealed partial class Value : pb::GeneratedMessage<Value, Value.Builder> {
    private static readonly Value defaultInstance = new Builder().BuildPartial();
    public static Value DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Value DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Value ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_Value__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Value, Value.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_Value__FieldAccessorTable; }
    }
    
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    private bool hasTimeStampAsDouble;
    private double timeStampAsDouble_ = 0D;
    public bool HasTimeStampAsDouble {
      get { return hasTimeStampAsDouble; }
    }
    public double TimeStampAsDouble {
      get { return timeStampAsDouble_; }
    }
    
    private bool hasVersion;
    private global::Rhino.DistributedHashTable.Protocol.ValueVersion version_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ValueVersion Version {
      get { return version_; }
    }
    
    private bool hasReadOnly;
    private bool readOnly_ = false;
    public bool HasReadOnly {
      get { return hasReadOnly; }
    }
    public bool ReadOnly {
      get { return readOnly_; }
    }
    
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    private bool hasSha256Hash;
    private pb::ByteString sha256Hash_ = pb::ByteString.Empty;
    public bool HasSha256Hash {
      get { return hasSha256Hash; }
    }
    public pb::ByteString Sha256Hash {
      get { return sha256Hash_; }
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.ValueVersion> parentVersions_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.ValueVersion>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.ValueVersion> ParentVersionsList {
      get { return parentVersions_; }
    }
    public int ParentVersionsCount {
      get { return parentVersions_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ValueVersion GetParentVersions(int index) {
      return parentVersions_[index];
    }
    
    private bool hasExpiresAtAsDouble;
    private double? expiresAtAsDouble_ = 0D;
    public bool HasExpiresAtAsDouble {
      get { return hasExpiresAtAsDouble && expiresAtAsDouble_.HasValue; }
    }
    public double? ExpiresAtAsDouble {
      get { return expiresAtAsDouble_; }
    }
    
    private bool hasTag;
    private int? tag_ = 0;
    public bool HasTag {
      get { return hasTag && tag_.HasValue; }
    }
    public int? Tag {
      get { return tag_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        if (!hasTimeStampAsDouble) return false;
        if (!hasVersion) return false;
        if (!hasReadOnly) return false;
        if (!hasData) return false;
        if (!hasSha256Hash) return false;
        if (!Version.IsInitialized) return false;
        foreach (global::Rhino.DistributedHashTable.Protocol.ValueVersion element in ParentVersionsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasKey) {
        output.WriteString(1, Key);
      }
      if (HasTimeStampAsDouble) {
        output.WriteDouble(2, TimeStampAsDouble);
      }
      if (HasVersion) {
        output.WriteMessage(3, Version);
      }
      if (HasReadOnly) {
        output.WriteBool(5, ReadOnly);
      }
      if (HasData) {
        output.WriteBytes(6, Data);
      }
      if (HasSha256Hash) {
        output.WriteBytes(7, Sha256Hash);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.ValueVersion element in ParentVersionsList) {
        output.WriteMessage(8, element);
      }
      if (HasExpiresAtAsDouble) {
        output.WriteDouble(10, ExpiresAtAsDouble.Value);
      }
      if (HasTag) {
        output.WriteInt32(11, Tag.Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Key);
        }
        if (HasTimeStampAsDouble) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, TimeStampAsDouble);
        }
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Version);
        }
        if (HasReadOnly) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, ReadOnly);
        }
        if (HasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(6, Data);
        }
        if (HasSha256Hash) {
          size += pb::CodedOutputStream.ComputeBytesSize(7, Sha256Hash);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.ValueVersion element in ParentVersionsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        if (HasExpiresAtAsDouble) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, ExpiresAtAsDouble.Value);
        }
        if (HasTag) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, Tag.Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Value ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Value ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Value ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Value ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Value ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Value ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Value ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Value ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Value prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Value, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Value result = new Value();
      
      protected override Value MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Value();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return Value.Descriptor; }
      }
      
      public override Value DefaultInstanceForType {
        get { return Value.DefaultInstance; }
      }
      
      public override Value BuildPartial() {
        result.parentVersions_.MakeReadOnly();
        Value returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Value) {
          return MergeFrom((Value) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Value other) {
        if (other == Value.DefaultInstance) return this;
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasTimeStampAsDouble) {
          TimeStampAsDouble = other.TimeStampAsDouble;
        }
        if (other.HasVersion) {
          MergeVersion(other.Version);
        }
        if (other.HasReadOnly) {
          ReadOnly = other.ReadOnly;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        if (other.HasSha256Hash) {
          Sha256Hash = other.Sha256Hash;
        }
        if (other.parentVersions_.Count != 0) {
          base.AddRange(other.parentVersions_, result.parentVersions_);
        }
        if (other.HasExpiresAtAsDouble) {
          ExpiresAtAsDouble = other.ExpiresAtAsDouble;
        }
        if (other.HasTag) {
          Tag = other.Tag;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Key = input.ReadString();
              break;
            }
            case 17: {
              TimeStampAsDouble = input.ReadDouble();
              break;
            }
            case 26: {
              global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.ValueVersion.CreateBuilder();
              if (HasVersion) {
                subBuilder.MergeFrom(Version);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Version = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              ReadOnly = input.ReadBool();
              break;
            }
            case 50: {
              Data = input.ReadBytes();
              break;
            }
            case 58: {
              Sha256Hash = input.ReadBytes();
              break;
            }
            case 66: {
              global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.ValueVersion.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddParentVersions(subBuilder.BuildPartial());
              break;
            }
            case 81: {
              ExpiresAtAsDouble = input.ReadDouble();
              break;
            }
            case 88: {
              Tag = input.ReadInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasKey {
        get { return result.HasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasTimeStampAsDouble {
        get { return result.HasTimeStampAsDouble; }
      }
      public double TimeStampAsDouble {
        get { return result.TimeStampAsDouble; }
        set { SetTimeStampAsDouble(value); }
      }
      public Builder SetTimeStampAsDouble(double value) {
        result.hasTimeStampAsDouble = true;
        result.timeStampAsDouble_ = value;
        return this;
      }
      public Builder ClearTimeStampAsDouble() {
        result.hasTimeStampAsDouble = false;
        result.timeStampAsDouble_ = 0D;
        return this;
      }
      
      public bool HasVersion {
       get { return result.HasVersion; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ValueVersion Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder SetVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasVersion = true;
        result.version_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasVersion &&
            result.version_ != global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance) {
            result.version_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.CreateBuilder(result.version_).MergeFrom(value).BuildPartial();
        } else {
          result.version_ = value;
        }
        result.hasVersion = true;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance;
        return this;
      }
      
      public bool HasReadOnly {
        get { return result.HasReadOnly; }
      }
      public bool ReadOnly {
        get { return result.ReadOnly; }
        set { SetReadOnly(value); }
      }
      public Builder SetReadOnly(bool value) {
        result.hasReadOnly = true;
        result.readOnly_ = value;
        return this;
      }
      public Builder ClearReadOnly() {
        result.hasReadOnly = false;
        result.readOnly_ = false;
        return this;
      }
      
      public bool HasData {
        get { return result.HasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasSha256Hash {
        get { return result.HasSha256Hash; }
      }
      public pb::ByteString Sha256Hash {
        get { return result.Sha256Hash; }
        set { SetSha256Hash(value); }
      }
      public Builder SetSha256Hash(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSha256Hash = true;
        result.sha256Hash_ = value;
        return this;
      }
      public Builder ClearSha256Hash() {
        result.hasSha256Hash = false;
        result.sha256Hash_ = pb::ByteString.Empty;
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.ValueVersion> ParentVersionsList {
        get { return result.parentVersions_; }
      }
      public int ParentVersionsCount {
        get { return result.ParentVersionsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ValueVersion GetParentVersions(int index) {
        return result.GetParentVersions(index);
      }
      public Builder SetParentVersions(int index, global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.parentVersions_[index] = value;
        return this;
      }
      public Builder SetParentVersions(int index, global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.parentVersions_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddParentVersions(global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.parentVersions_.Add(value);
        return this;
      }
      public Builder AddParentVersions(global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.parentVersions_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeParentVersions(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.ValueVersion> values) {
        base.AddRange(values, result.parentVersions_);
        return this;
      }
      public Builder ClearParentVersions() {
        result.parentVersions_.Clear();
        return this;
      }
      
      public bool HasExpiresAtAsDouble {
        get { return result.HasExpiresAtAsDouble; }
      }
      public double? ExpiresAtAsDouble {
        get { return result.ExpiresAtAsDouble; }
        set { SetExpiresAtAsDouble(value); }
      }
      public Builder SetExpiresAtAsDouble(double? value) {
        result.hasExpiresAtAsDouble = true;
        result.expiresAtAsDouble_ = value;
        return this;
      }
      public Builder ClearExpiresAtAsDouble() {
        result.hasExpiresAtAsDouble = false;
        result.expiresAtAsDouble_ = 0D;
        return this;
      }
      
      public bool HasTag {
        get { return result.HasTag; }
      }
      public int? Tag {
        get { return result.Tag; }
        set { SetTag(value); }
      }
      public Builder SetTag(int? value) {
        result.hasTag = true;
        result.tag_ = value;
        return this;
      }
      public Builder ClearTag() {
        result.hasTag = false;
        result.tag_ = 0;
        return this;
      }
    }
  }
  
  public sealed partial class NodeEndpoint : pb::GeneratedMessage<NodeEndpoint, NodeEndpoint.Builder> {
    private static readonly NodeEndpoint defaultInstance = new Builder().BuildPartial();
    public static NodeEndpoint DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NodeEndpoint DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override NodeEndpoint ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_NodeEndpoint__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NodeEndpoint, NodeEndpoint.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_NodeEndpoint__FieldAccessorTable; }
    }
    
    private bool hasSync;
    private string sync_ = "";
    public bool HasSync {
      get { return hasSync; }
    }
    public string Sync {
      get { return sync_; }
    }
    
    private bool hasAsync;
    private string async_ = "";
    public bool HasAsync {
      get { return hasAsync; }
    }
    public string Async {
      get { return async_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSync) return false;
        if (!hasAsync) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasSync) {
        output.WriteString(1, Sync);
      }
      if (HasAsync) {
        output.WriteString(2, Async);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSync) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Sync);
        }
        if (HasAsync) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Async);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NodeEndpoint ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NodeEndpoint prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<NodeEndpoint, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      NodeEndpoint result = new NodeEndpoint();
      
      protected override NodeEndpoint MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new NodeEndpoint();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return NodeEndpoint.Descriptor; }
      }
      
      public override NodeEndpoint DefaultInstanceForType {
        get { return NodeEndpoint.DefaultInstance; }
      }
      
      public override NodeEndpoint BuildPartial() {
        NodeEndpoint returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NodeEndpoint) {
          return MergeFrom((NodeEndpoint) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NodeEndpoint other) {
        if (other == NodeEndpoint.DefaultInstance) return this;
        if (other.HasSync) {
          Sync = other.Sync;
        }
        if (other.HasAsync) {
          Async = other.Async;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Sync = input.ReadString();
              break;
            }
            case 18: {
              Async = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasSync {
        get { return result.HasSync; }
      }
      public string Sync {
        get { return result.Sync; }
        set { SetSync(value); }
      }
      public Builder SetSync(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSync = true;
        result.sync_ = value;
        return this;
      }
      public Builder ClearSync() {
        result.hasSync = false;
        result.sync_ = "";
        return this;
      }
      
      public bool HasAsync {
        get { return result.HasAsync; }
      }
      public string Async {
        get { return result.Async; }
        set { SetAsync(value); }
      }
      public Builder SetAsync(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAsync = true;
        result.async_ = value;
        return this;
      }
      public Builder ClearAsync() {
        result.hasAsync = false;
        result.async_ = "";
        return this;
      }
    }
  }
  
  public sealed partial class ValueVersion : pb::GeneratedMessage<ValueVersion, ValueVersion.Builder> {
    private static readonly ValueVersion defaultInstance = new Builder().BuildPartial();
    public static ValueVersion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ValueVersion DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ValueVersion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_ValueVersion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ValueVersion, ValueVersion.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_ValueVersion__FieldAccessorTable; }
    }
    
    private bool hasNumber;
    private int number_ = 0;
    public bool HasNumber {
      get { return hasNumber; }
    }
    public int Number {
      get { return number_; }
    }
    
    private bool hasInstanceId;
    private pb::ByteString instanceId_ = pb::ByteString.Empty;
    public bool HasInstanceId {
      get { return hasInstanceId; }
    }
    public pb::ByteString InstanceId {
      get { return instanceId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNumber) return false;
        if (!hasInstanceId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasNumber) {
        output.WriteInt32(1, Number);
      }
      if (HasInstanceId) {
        output.WriteBytes(2, InstanceId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasNumber) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Number);
        }
        if (HasInstanceId) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, InstanceId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ValueVersion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ValueVersion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ValueVersion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ValueVersion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ValueVersion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ValueVersion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ValueVersion ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ValueVersion ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ValueVersion prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ValueVersion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ValueVersion result = new ValueVersion();
      
      protected override ValueVersion MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ValueVersion();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return ValueVersion.Descriptor; }
      }
      
      public override ValueVersion DefaultInstanceForType {
        get { return ValueVersion.DefaultInstance; }
      }
      
      public override ValueVersion BuildPartial() {
        ValueVersion returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ValueVersion) {
          return MergeFrom((ValueVersion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ValueVersion other) {
        if (other == ValueVersion.DefaultInstance) return this;
        if (other.HasNumber) {
          Number = other.Number;
        }
        if (other.HasInstanceId) {
          InstanceId = other.InstanceId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Number = input.ReadInt32();
              break;
            }
            case 18: {
              InstanceId = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasNumber {
        get { return result.HasNumber; }
      }
      public int Number {
        get { return result.Number; }
        set { SetNumber(value); }
      }
      public Builder SetNumber(int value) {
        result.hasNumber = true;
        result.number_ = value;
        return this;
      }
      public Builder ClearNumber() {
        result.hasNumber = false;
        result.number_ = 0;
        return this;
      }
      
      public bool HasInstanceId {
        get { return result.HasInstanceId; }
      }
      public pb::ByteString InstanceId {
        get { return result.InstanceId; }
        set { SetInstanceId(value); }
      }
      public Builder SetInstanceId(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInstanceId = true;
        result.instanceId_ = value;
        return this;
      }
      public Builder ClearInstanceId() {
        result.hasInstanceId = false;
        result.instanceId_ = pb::ByteString.Empty;
        return this;
      }
    }
  }
  
  public sealed partial class Segment : pb::GeneratedMessage<Segment, Segment.Builder> {
    private static readonly Segment defaultInstance = new Builder().BuildPartial();
    public static Segment DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Segment DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Segment ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_Segment__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Segment, Segment.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_Segment__FieldAccessorTable; }
    }
    
    private bool hasIndex;
    private int index_ = 0;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    private bool hasAssignedEndpoint;
    private global::Rhino.DistributedHashTable.Protocol.NodeEndpoint assignedEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
    public bool HasAssignedEndpoint {
      get { return hasAssignedEndpoint; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint AssignedEndpoint {
      get { return assignedEndpoint_; }
    }
    
    private bool hasInProcessOfMovingToEndpoint;
    private global::Rhino.DistributedHashTable.Protocol.NodeEndpoint inProcessOfMovingToEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
    public bool HasInProcessOfMovingToEndpoint {
      get { return hasInProcessOfMovingToEndpoint; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint InProcessOfMovingToEndpoint {
      get { return inProcessOfMovingToEndpoint_; }
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint> pendingBackups_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint> PendingBackupsList {
      get { return pendingBackups_; }
    }
    public int PendingBackupsCount {
      get { return pendingBackups_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint GetPendingBackups(int index) {
      return pendingBackups_[index];
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint> backups_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint> BackupsList {
      get { return backups_; }
    }
    public int BackupsCount {
      get { return backups_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint GetBackups(int index) {
      return backups_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIndex) return false;
        if (HasAssignedEndpoint) {
          if (!AssignedEndpoint.IsInitialized) return false;
        }
        if (HasInProcessOfMovingToEndpoint) {
          if (!InProcessOfMovingToEndpoint.IsInitialized) return false;
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.NodeEndpoint element in PendingBackupsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.NodeEndpoint element in BackupsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasIndex) {
        output.WriteInt32(1, Index);
      }
      if (HasAssignedEndpoint) {
        output.WriteMessage(2, AssignedEndpoint);
      }
      if (HasInProcessOfMovingToEndpoint) {
        output.WriteMessage(3, InProcessOfMovingToEndpoint);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.NodeEndpoint element in PendingBackupsList) {
        output.WriteMessage(4, element);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.NodeEndpoint element in BackupsList) {
        output.WriteMessage(5, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Index);
        }
        if (HasAssignedEndpoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, AssignedEndpoint);
        }
        if (HasInProcessOfMovingToEndpoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, InProcessOfMovingToEndpoint);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.NodeEndpoint element in PendingBackupsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.NodeEndpoint element in BackupsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Segment ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Segment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Segment ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Segment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Segment ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Segment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Segment ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Segment ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Segment prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Segment, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Segment result = new Segment();
      
      protected override Segment MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Segment();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return Segment.Descriptor; }
      }
      
      public override Segment DefaultInstanceForType {
        get { return Segment.DefaultInstance; }
      }
      
      public override Segment BuildPartial() {
        result.pendingBackups_.MakeReadOnly();
        result.backups_.MakeReadOnly();
        Segment returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Segment) {
          return MergeFrom((Segment) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Segment other) {
        if (other == Segment.DefaultInstance) return this;
        if (other.HasIndex) {
          Index = other.Index;
        }
        if (other.HasAssignedEndpoint) {
          MergeAssignedEndpoint(other.AssignedEndpoint);
        }
        if (other.HasInProcessOfMovingToEndpoint) {
          MergeInProcessOfMovingToEndpoint(other.InProcessOfMovingToEndpoint);
        }
        if (other.pendingBackups_.Count != 0) {
          base.AddRange(other.pendingBackups_, result.pendingBackups_);
        }
        if (other.backups_.Count != 0) {
          base.AddRange(other.backups_, result.backups_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Index = input.ReadInt32();
              break;
            }
            case 18: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              if (HasAssignedEndpoint) {
                subBuilder.MergeFrom(AssignedEndpoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AssignedEndpoint = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              if (HasInProcessOfMovingToEndpoint) {
                subBuilder.MergeFrom(InProcessOfMovingToEndpoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              InProcessOfMovingToEndpoint = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPendingBackups(subBuilder.BuildPartial());
              break;
            }
            case 42: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddBackups(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasIndex {
        get { return result.HasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
      
      public bool HasAssignedEndpoint {
       get { return result.HasAssignedEndpoint; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint AssignedEndpoint {
        get { return result.AssignedEndpoint; }
        set { SetAssignedEndpoint(value); }
      }
      public Builder SetAssignedEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAssignedEndpoint = true;
        result.assignedEndpoint_ = value;
        return this;
      }
      public Builder SetAssignedEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAssignedEndpoint = true;
        result.assignedEndpoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAssignedEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAssignedEndpoint &&
            result.assignedEndpoint_ != global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance) {
            result.assignedEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder(result.assignedEndpoint_).MergeFrom(value).BuildPartial();
        } else {
          result.assignedEndpoint_ = value;
        }
        result.hasAssignedEndpoint = true;
        return this;
      }
      public Builder ClearAssignedEndpoint() {
        result.hasAssignedEndpoint = false;
        result.assignedEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
        return this;
      }
      
      public bool HasInProcessOfMovingToEndpoint {
       get { return result.HasInProcessOfMovingToEndpoint; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint InProcessOfMovingToEndpoint {
        get { return result.InProcessOfMovingToEndpoint; }
        set { SetInProcessOfMovingToEndpoint(value); }
      }
      public Builder SetInProcessOfMovingToEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInProcessOfMovingToEndpoint = true;
        result.inProcessOfMovingToEndpoint_ = value;
        return this;
      }
      public Builder SetInProcessOfMovingToEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasInProcessOfMovingToEndpoint = true;
        result.inProcessOfMovingToEndpoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInProcessOfMovingToEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasInProcessOfMovingToEndpoint &&
            result.inProcessOfMovingToEndpoint_ != global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance) {
            result.inProcessOfMovingToEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder(result.inProcessOfMovingToEndpoint_).MergeFrom(value).BuildPartial();
        } else {
          result.inProcessOfMovingToEndpoint_ = value;
        }
        result.hasInProcessOfMovingToEndpoint = true;
        return this;
      }
      public Builder ClearInProcessOfMovingToEndpoint() {
        result.hasInProcessOfMovingToEndpoint = false;
        result.inProcessOfMovingToEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint> PendingBackupsList {
        get { return result.pendingBackups_; }
      }
      public int PendingBackupsCount {
        get { return result.PendingBackupsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint GetPendingBackups(int index) {
        return result.GetPendingBackups(index);
      }
      public Builder SetPendingBackups(int index, global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pendingBackups_[index] = value;
        return this;
      }
      public Builder SetPendingBackups(int index, global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pendingBackups_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPendingBackups(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pendingBackups_.Add(value);
        return this;
      }
      public Builder AddPendingBackups(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pendingBackups_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePendingBackups(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint> values) {
        base.AddRange(values, result.pendingBackups_);
        return this;
      }
      public Builder ClearPendingBackups() {
        result.pendingBackups_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint> BackupsList {
        get { return result.backups_; }
      }
      public int BackupsCount {
        get { return result.BackupsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint GetBackups(int index) {
        return result.GetBackups(index);
      }
      public Builder SetBackups(int index, global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.backups_[index] = value;
        return this;
      }
      public Builder SetBackups(int index, global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.backups_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBackups(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.backups_.Add(value);
        return this;
      }
      public Builder AddBackups(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.backups_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBackups(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint> values) {
        base.AddRange(values, result.backups_);
        return this;
      }
      public Builder ClearBackups() {
        result.backups_.Clear();
        return this;
      }
    }
  }
  
  public sealed partial class JoinRequestMessage : pb::GeneratedMessage<JoinRequestMessage, JoinRequestMessage.Builder> {
    private static readonly JoinRequestMessage defaultInstance = new Builder().BuildPartial();
    public static JoinRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinRequestMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override JoinRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_JoinRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinRequestMessage, JoinRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_JoinRequestMessage__FieldAccessorTable; }
    }
    
    private bool hasEndpointJoining;
    private global::Rhino.DistributedHashTable.Protocol.NodeEndpoint endpointJoining_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
    public bool HasEndpointJoining {
      get { return hasEndpointJoining; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint EndpointJoining {
      get { return endpointJoining_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEndpointJoining) return false;
        if (!EndpointJoining.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasEndpointJoining) {
        output.WriteMessage(1, EndpointJoining);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasEndpointJoining) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, EndpointJoining);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JoinRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinRequestMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<JoinRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      JoinRequestMessage result = new JoinRequestMessage();
      
      protected override JoinRequestMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new JoinRequestMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return JoinRequestMessage.Descriptor; }
      }
      
      public override JoinRequestMessage DefaultInstanceForType {
        get { return JoinRequestMessage.DefaultInstance; }
      }
      
      public override JoinRequestMessage BuildPartial() {
        JoinRequestMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinRequestMessage) {
          return MergeFrom((JoinRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinRequestMessage other) {
        if (other == JoinRequestMessage.DefaultInstance) return this;
        if (other.HasEndpointJoining) {
          MergeEndpointJoining(other.EndpointJoining);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              if (HasEndpointJoining) {
                subBuilder.MergeFrom(EndpointJoining);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EndpointJoining = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasEndpointJoining {
       get { return result.HasEndpointJoining; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint EndpointJoining {
        get { return result.EndpointJoining; }
        set { SetEndpointJoining(value); }
      }
      public Builder SetEndpointJoining(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasEndpointJoining = true;
        result.endpointJoining_ = value;
        return this;
      }
      public Builder SetEndpointJoining(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasEndpointJoining = true;
        result.endpointJoining_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEndpointJoining(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasEndpointJoining &&
            result.endpointJoining_ != global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance) {
            result.endpointJoining_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder(result.endpointJoining_).MergeFrom(value).BuildPartial();
        } else {
          result.endpointJoining_ = value;
        }
        result.hasEndpointJoining = true;
        return this;
      }
      public Builder ClearEndpointJoining() {
        result.hasEndpointJoining = false;
        result.endpointJoining_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
        return this;
      }
    }
  }
  
  public sealed partial class JoinResponseMessage : pb::GeneratedMessage<JoinResponseMessage, JoinResponseMessage.Builder> {
    private static readonly JoinResponseMessage defaultInstance = new Builder().BuildPartial();
    public static JoinResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinResponseMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override JoinResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_JoinResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinResponseMessage, JoinResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_JoinResponseMessage__FieldAccessorTable; }
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.Segment> segments_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.Segment>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.Segment> SegmentsList {
      get { return segments_; }
    }
    public int SegmentsCount {
      get { return segments_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.Segment GetSegments(int index) {
      return segments_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Rhino.DistributedHashTable.Protocol.Segment element in SegmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      foreach (global::Rhino.DistributedHashTable.Protocol.Segment element in SegmentsList) {
        output.WriteMessage(1, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Rhino.DistributedHashTable.Protocol.Segment element in SegmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JoinResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinResponseMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<JoinResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      JoinResponseMessage result = new JoinResponseMessage();
      
      protected override JoinResponseMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new JoinResponseMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return JoinResponseMessage.Descriptor; }
      }
      
      public override JoinResponseMessage DefaultInstanceForType {
        get { return JoinResponseMessage.DefaultInstance; }
      }
      
      public override JoinResponseMessage BuildPartial() {
        result.segments_.MakeReadOnly();
        JoinResponseMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinResponseMessage) {
          return MergeFrom((JoinResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinResponseMessage other) {
        if (other == JoinResponseMessage.DefaultInstance) return this;
        if (other.segments_.Count != 0) {
          base.AddRange(other.segments_, result.segments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Rhino.DistributedHashTable.Protocol.Segment.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.Segment.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddSegments(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.Segment> SegmentsList {
        get { return result.segments_; }
      }
      public int SegmentsCount {
        get { return result.SegmentsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.Segment GetSegments(int index) {
        return result.GetSegments(index);
      }
      public Builder SetSegments(int index, global::Rhino.DistributedHashTable.Protocol.Segment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.segments_[index] = value;
        return this;
      }
      public Builder SetSegments(int index, global::Rhino.DistributedHashTable.Protocol.Segment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.segments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSegments(global::Rhino.DistributedHashTable.Protocol.Segment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.segments_.Add(value);
        return this;
      }
      public Builder AddSegments(global::Rhino.DistributedHashTable.Protocol.Segment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.segments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSegments(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.Segment> values) {
        base.AddRange(values, result.segments_);
        return this;
      }
      public Builder ClearSegments() {
        result.segments_.Clear();
        return this;
      }
    }
  }
  
  public sealed partial class TopologyResultMessage : pb::GeneratedMessage<TopologyResultMessage, TopologyResultMessage.Builder> {
    private static readonly TopologyResultMessage defaultInstance = new Builder().BuildPartial();
    public static TopologyResultMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TopologyResultMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override TopologyResultMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_TopologyResultMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TopologyResultMessage, TopologyResultMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_TopologyResultMessage__FieldAccessorTable; }
    }
    
    private bool hasTimestampAsDouble;
    private double timestampAsDouble_ = 0D;
    public bool HasTimestampAsDouble {
      get { return hasTimestampAsDouble; }
    }
    public double TimestampAsDouble {
      get { return timestampAsDouble_; }
    }
    
    private bool hasVersion;
    private int version_ = 0;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.Segment> segments_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.Segment>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.Segment> SegmentsList {
      get { return segments_; }
    }
    public int SegmentsCount {
      get { return segments_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.Segment GetSegments(int index) {
      return segments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimestampAsDouble) return false;
        if (!hasVersion) return false;
        foreach (global::Rhino.DistributedHashTable.Protocol.Segment element in SegmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasTimestampAsDouble) {
        output.WriteDouble(1, TimestampAsDouble);
      }
      if (HasVersion) {
        output.WriteInt32(2, Version);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.Segment element in SegmentsList) {
        output.WriteMessage(3, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTimestampAsDouble) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, TimestampAsDouble);
        }
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.Segment element in SegmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TopologyResultMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TopologyResultMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<TopologyResultMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      TopologyResultMessage result = new TopologyResultMessage();
      
      protected override TopologyResultMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new TopologyResultMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return TopologyResultMessage.Descriptor; }
      }
      
      public override TopologyResultMessage DefaultInstanceForType {
        get { return TopologyResultMessage.DefaultInstance; }
      }
      
      public override TopologyResultMessage BuildPartial() {
        result.segments_.MakeReadOnly();
        TopologyResultMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TopologyResultMessage) {
          return MergeFrom((TopologyResultMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TopologyResultMessage other) {
        if (other == TopologyResultMessage.DefaultInstance) return this;
        if (other.HasTimestampAsDouble) {
          TimestampAsDouble = other.TimestampAsDouble;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.segments_.Count != 0) {
          base.AddRange(other.segments_, result.segments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 9: {
              TimestampAsDouble = input.ReadDouble();
              break;
            }
            case 16: {
              Version = input.ReadInt32();
              break;
            }
            case 26: {
              global::Rhino.DistributedHashTable.Protocol.Segment.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.Segment.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddSegments(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasTimestampAsDouble {
        get { return result.HasTimestampAsDouble; }
      }
      public double TimestampAsDouble {
        get { return result.TimestampAsDouble; }
        set { SetTimestampAsDouble(value); }
      }
      public Builder SetTimestampAsDouble(double value) {
        result.hasTimestampAsDouble = true;
        result.timestampAsDouble_ = value;
        return this;
      }
      public Builder ClearTimestampAsDouble() {
        result.hasTimestampAsDouble = false;
        result.timestampAsDouble_ = 0D;
        return this;
      }
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.Segment> SegmentsList {
        get { return result.segments_; }
      }
      public int SegmentsCount {
        get { return result.SegmentsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.Segment GetSegments(int index) {
        return result.GetSegments(index);
      }
      public Builder SetSegments(int index, global::Rhino.DistributedHashTable.Protocol.Segment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.segments_[index] = value;
        return this;
      }
      public Builder SetSegments(int index, global::Rhino.DistributedHashTable.Protocol.Segment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.segments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSegments(global::Rhino.DistributedHashTable.Protocol.Segment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.segments_.Add(value);
        return this;
      }
      public Builder AddSegments(global::Rhino.DistributedHashTable.Protocol.Segment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.segments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSegments(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.Segment> values) {
        base.AddRange(values, result.segments_);
        return this;
      }
      public Builder ClearSegments() {
        result.segments_.Clear();
        return this;
      }
    }
  }
  
  public sealed partial class CaughtUpRequestMessage : pb::GeneratedMessage<CaughtUpRequestMessage, CaughtUpRequestMessage.Builder> {
    private static readonly CaughtUpRequestMessage defaultInstance = new Builder().BuildPartial();
    public static CaughtUpRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CaughtUpRequestMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override CaughtUpRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_CaughtUpRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CaughtUpRequestMessage, CaughtUpRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_CaughtUpRequestMessage__FieldAccessorTable; }
    }
    
    private bool hasEndpoint;
    private global::Rhino.DistributedHashTable.Protocol.NodeEndpoint endpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
    public bool HasEndpoint {
      get { return hasEndpoint; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint Endpoint {
      get { return endpoint_; }
    }
    
    private pbc::PopsicleList<int> caughtUpSegments_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CaughtUpSegmentsList {
      get { return pbc::Lists.AsReadOnly(caughtUpSegments_); }
    }
    public int CaughtUpSegmentsCount {
      get { return caughtUpSegments_.Count; }
    }
    public int GetCaughtUpSegments(int index) {
      return caughtUpSegments_[index];
    }
    
    private bool hasType;
    private global::Rhino.DistributedHashTable.Protocol.ReplicationType type_ = global::Rhino.DistributedHashTable.Protocol.ReplicationType.Ownership;
    public bool HasType {
      get { return hasType; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ReplicationType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEndpoint) return false;
        if (!hasType) return false;
        if (!Endpoint.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasEndpoint) {
        output.WriteMessage(1, Endpoint);
      }
      if (caughtUpSegments_.Count > 0) {
        foreach (int element in caughtUpSegments_) {
          output.WriteInt32(2, element);
        }
      }
      if (HasType) {
        output.WriteEnum(3, (int) Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasEndpoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Endpoint);
        }
        {
          int dataSize = 0;
          foreach (int element in CaughtUpSegmentsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * caughtUpSegments_.Count;
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CaughtUpRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CaughtUpRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CaughtUpRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CaughtUpRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CaughtUpRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CaughtUpRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CaughtUpRequestMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CaughtUpRequestMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CaughtUpRequestMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<CaughtUpRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      CaughtUpRequestMessage result = new CaughtUpRequestMessage();
      
      protected override CaughtUpRequestMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new CaughtUpRequestMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return CaughtUpRequestMessage.Descriptor; }
      }
      
      public override CaughtUpRequestMessage DefaultInstanceForType {
        get { return CaughtUpRequestMessage.DefaultInstance; }
      }
      
      public override CaughtUpRequestMessage BuildPartial() {
        result.caughtUpSegments_.MakeReadOnly();
        CaughtUpRequestMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CaughtUpRequestMessage) {
          return MergeFrom((CaughtUpRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CaughtUpRequestMessage other) {
        if (other == CaughtUpRequestMessage.DefaultInstance) return this;
        if (other.HasEndpoint) {
          MergeEndpoint(other.Endpoint);
        }
        if (other.caughtUpSegments_.Count != 0) {
          base.AddRange(other.caughtUpSegments_, result.caughtUpSegments_);
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              if (HasEndpoint) {
                subBuilder.MergeFrom(Endpoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Endpoint = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              AddCaughtUpSegments(input.ReadInt32());
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Rhino.DistributedHashTable.Protocol.ReplicationType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                Type = (global::Rhino.DistributedHashTable.Protocol.ReplicationType) rawValue;
              }
              break;
            }
          }
        }
      }
      
      
      public bool HasEndpoint {
       get { return result.HasEndpoint; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint Endpoint {
        get { return result.Endpoint; }
        set { SetEndpoint(value); }
      }
      public Builder SetEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasEndpoint = true;
        result.endpoint_ = value;
        return this;
      }
      public Builder SetEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasEndpoint = true;
        result.endpoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasEndpoint &&
            result.endpoint_ != global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance) {
            result.endpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder(result.endpoint_).MergeFrom(value).BuildPartial();
        } else {
          result.endpoint_ = value;
        }
        result.hasEndpoint = true;
        return this;
      }
      public Builder ClearEndpoint() {
        result.hasEndpoint = false;
        result.endpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<int> CaughtUpSegmentsList {
        get { return result.caughtUpSegments_; }
      }
      public int CaughtUpSegmentsCount {
        get { return result.CaughtUpSegmentsCount; }
      }
      public int GetCaughtUpSegments(int index) {
        return result.GetCaughtUpSegments(index);
      }
      public Builder SetCaughtUpSegments(int index, int value) {
        result.caughtUpSegments_[index] = value;
        return this;
      }
      public Builder AddCaughtUpSegments(int value) {
        result.caughtUpSegments_.Add(value);
        return this;
      }
      public Builder AddRangeCaughtUpSegments(scg::IEnumerable<int> values) {
        base.AddRange(values, result.caughtUpSegments_);
        return this;
      }
      public Builder ClearCaughtUpSegments() {
        result.caughtUpSegments_.Clear();
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ReplicationType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Rhino.DistributedHashTable.Protocol.ReplicationType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::Rhino.DistributedHashTable.Protocol.ReplicationType.Ownership;
        return this;
      }
    }
  }
  
  public sealed partial class GaveUpRequestMessage : pb::GeneratedMessage<GaveUpRequestMessage, GaveUpRequestMessage.Builder> {
    private static readonly GaveUpRequestMessage defaultInstance = new Builder().BuildPartial();
    public static GaveUpRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GaveUpRequestMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GaveUpRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_GaveUpRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GaveUpRequestMessage, GaveUpRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_GaveUpRequestMessage__FieldAccessorTable; }
    }
    
    private bool hasEndpoint;
    private global::Rhino.DistributedHashTable.Protocol.NodeEndpoint endpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
    public bool HasEndpoint {
      get { return hasEndpoint; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint Endpoint {
      get { return endpoint_; }
    }
    
    private pbc::PopsicleList<int> gaveUpSegments_ = new pbc::PopsicleList<int>();
    public scg::IList<int> GaveUpSegmentsList {
      get { return pbc::Lists.AsReadOnly(gaveUpSegments_); }
    }
    public int GaveUpSegmentsCount {
      get { return gaveUpSegments_.Count; }
    }
    public int GetGaveUpSegments(int index) {
      return gaveUpSegments_[index];
    }
    
    private bool hasType;
    private global::Rhino.DistributedHashTable.Protocol.ReplicationType type_ = global::Rhino.DistributedHashTable.Protocol.ReplicationType.Ownership;
    public bool HasType {
      get { return hasType; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ReplicationType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEndpoint) return false;
        if (!hasType) return false;
        if (!Endpoint.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasEndpoint) {
        output.WriteMessage(1, Endpoint);
      }
      if (gaveUpSegments_.Count > 0) {
        foreach (int element in gaveUpSegments_) {
          output.WriteInt32(2, element);
        }
      }
      if (HasType) {
        output.WriteEnum(3, (int) Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasEndpoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Endpoint);
        }
        {
          int dataSize = 0;
          foreach (int element in GaveUpSegmentsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * gaveUpSegments_.Count;
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GaveUpRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GaveUpRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GaveUpRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GaveUpRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GaveUpRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GaveUpRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GaveUpRequestMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GaveUpRequestMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GaveUpRequestMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GaveUpRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GaveUpRequestMessage result = new GaveUpRequestMessage();
      
      protected override GaveUpRequestMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GaveUpRequestMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return GaveUpRequestMessage.Descriptor; }
      }
      
      public override GaveUpRequestMessage DefaultInstanceForType {
        get { return GaveUpRequestMessage.DefaultInstance; }
      }
      
      public override GaveUpRequestMessage BuildPartial() {
        result.gaveUpSegments_.MakeReadOnly();
        GaveUpRequestMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GaveUpRequestMessage) {
          return MergeFrom((GaveUpRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GaveUpRequestMessage other) {
        if (other == GaveUpRequestMessage.DefaultInstance) return this;
        if (other.HasEndpoint) {
          MergeEndpoint(other.Endpoint);
        }
        if (other.gaveUpSegments_.Count != 0) {
          base.AddRange(other.gaveUpSegments_, result.gaveUpSegments_);
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              if (HasEndpoint) {
                subBuilder.MergeFrom(Endpoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Endpoint = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              AddGaveUpSegments(input.ReadInt32());
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Rhino.DistributedHashTable.Protocol.ReplicationType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                Type = (global::Rhino.DistributedHashTable.Protocol.ReplicationType) rawValue;
              }
              break;
            }
          }
        }
      }
      
      
      public bool HasEndpoint {
       get { return result.HasEndpoint; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint Endpoint {
        get { return result.Endpoint; }
        set { SetEndpoint(value); }
      }
      public Builder SetEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasEndpoint = true;
        result.endpoint_ = value;
        return this;
      }
      public Builder SetEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasEndpoint = true;
        result.endpoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasEndpoint &&
            result.endpoint_ != global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance) {
            result.endpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder(result.endpoint_).MergeFrom(value).BuildPartial();
        } else {
          result.endpoint_ = value;
        }
        result.hasEndpoint = true;
        return this;
      }
      public Builder ClearEndpoint() {
        result.hasEndpoint = false;
        result.endpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<int> GaveUpSegmentsList {
        get { return result.gaveUpSegments_; }
      }
      public int GaveUpSegmentsCount {
        get { return result.GaveUpSegmentsCount; }
      }
      public int GetGaveUpSegments(int index) {
        return result.GetGaveUpSegments(index);
      }
      public Builder SetGaveUpSegments(int index, int value) {
        result.gaveUpSegments_[index] = value;
        return this;
      }
      public Builder AddGaveUpSegments(int value) {
        result.gaveUpSegments_.Add(value);
        return this;
      }
      public Builder AddRangeGaveUpSegments(scg::IEnumerable<int> values) {
        base.AddRange(values, result.gaveUpSegments_);
        return this;
      }
      public Builder ClearGaveUpSegments() {
        result.gaveUpSegments_.Clear();
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ReplicationType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Rhino.DistributedHashTable.Protocol.ReplicationType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::Rhino.DistributedHashTable.Protocol.ReplicationType.Ownership;
        return this;
      }
    }
  }
  
  public sealed partial class GetRequestMessage : pb::GeneratedMessage<GetRequestMessage, GetRequestMessage.Builder> {
    private static readonly GetRequestMessage defaultInstance = new Builder().BuildPartial();
    public static GetRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetRequestMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GetRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_GetRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetRequestMessage, GetRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_GetRequestMessage__FieldAccessorTable; }
    }
    
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    private bool hasSegment;
    private int segment_ = 0;
    public bool HasSegment {
      get { return hasSegment; }
    }
    public int Segment {
      get { return segment_; }
    }
    
    private bool hasSpecificVersion;
    private global::Rhino.DistributedHashTable.Protocol.ValueVersion specificVersion_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance;
    public bool HasSpecificVersion {
      get { return hasSpecificVersion; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ValueVersion SpecificVersion {
      get { return specificVersion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        if (!hasSegment) return false;
        if (HasSpecificVersion) {
          if (!SpecificVersion.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasKey) {
        output.WriteString(1, Key);
      }
      if (HasSegment) {
        output.WriteInt32(2, Segment);
      }
      if (HasSpecificVersion) {
        output.WriteMessage(3, SpecificVersion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Key);
        }
        if (HasSegment) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Segment);
        }
        if (HasSpecificVersion) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SpecificVersion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetRequestMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetRequestMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetRequestMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GetRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GetRequestMessage result = new GetRequestMessage();
      
      protected override GetRequestMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GetRequestMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return GetRequestMessage.Descriptor; }
      }
      
      public override GetRequestMessage DefaultInstanceForType {
        get { return GetRequestMessage.DefaultInstance; }
      }
      
      public override GetRequestMessage BuildPartial() {
        GetRequestMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetRequestMessage) {
          return MergeFrom((GetRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetRequestMessage other) {
        if (other == GetRequestMessage.DefaultInstance) return this;
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasSegment) {
          Segment = other.Segment;
        }
        if (other.HasSpecificVersion) {
          MergeSpecificVersion(other.SpecificVersion);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Key = input.ReadString();
              break;
            }
            case 16: {
              Segment = input.ReadInt32();
              break;
            }
            case 26: {
              global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.ValueVersion.CreateBuilder();
              if (HasSpecificVersion) {
                subBuilder.MergeFrom(SpecificVersion);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SpecificVersion = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasKey {
        get { return result.HasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasSegment {
        get { return result.HasSegment; }
      }
      public int Segment {
        get { return result.Segment; }
        set { SetSegment(value); }
      }
      public Builder SetSegment(int value) {
        result.hasSegment = true;
        result.segment_ = value;
        return this;
      }
      public Builder ClearSegment() {
        result.hasSegment = false;
        result.segment_ = 0;
        return this;
      }
      
      public bool HasSpecificVersion {
       get { return result.HasSpecificVersion; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ValueVersion SpecificVersion {
        get { return result.SpecificVersion; }
        set { SetSpecificVersion(value); }
      }
      public Builder SetSpecificVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSpecificVersion = true;
        result.specificVersion_ = value;
        return this;
      }
      public Builder SetSpecificVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSpecificVersion = true;
        result.specificVersion_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSpecificVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSpecificVersion &&
            result.specificVersion_ != global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance) {
            result.specificVersion_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.CreateBuilder(result.specificVersion_).MergeFrom(value).BuildPartial();
        } else {
          result.specificVersion_ = value;
        }
        result.hasSpecificVersion = true;
        return this;
      }
      public Builder ClearSpecificVersion() {
        result.hasSpecificVersion = false;
        result.specificVersion_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance;
        return this;
      }
    }
  }
  
  public sealed partial class GetResponseMessage : pb::GeneratedMessage<GetResponseMessage, GetResponseMessage.Builder> {
    private static readonly GetResponseMessage defaultInstance = new Builder().BuildPartial();
    public static GetResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetResponseMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GetResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_GetResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetResponseMessage, GetResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_GetResponseMessage__FieldAccessorTable; }
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.Value> values_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.Value>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.Value> ValuesList {
      get { return values_; }
    }
    public int ValuesCount {
      get { return values_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.Value GetValues(int index) {
      return values_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Rhino.DistributedHashTable.Protocol.Value element in ValuesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      foreach (global::Rhino.DistributedHashTable.Protocol.Value element in ValuesList) {
        output.WriteMessage(1, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Rhino.DistributedHashTable.Protocol.Value element in ValuesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetResponseMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetResponseMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetResponseMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GetResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GetResponseMessage result = new GetResponseMessage();
      
      protected override GetResponseMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GetResponseMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return GetResponseMessage.Descriptor; }
      }
      
      public override GetResponseMessage DefaultInstanceForType {
        get { return GetResponseMessage.DefaultInstance; }
      }
      
      public override GetResponseMessage BuildPartial() {
        result.values_.MakeReadOnly();
        GetResponseMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetResponseMessage) {
          return MergeFrom((GetResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetResponseMessage other) {
        if (other == GetResponseMessage.DefaultInstance) return this;
        if (other.values_.Count != 0) {
          base.AddRange(other.values_, result.values_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Rhino.DistributedHashTable.Protocol.Value.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.Value.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddValues(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.Value> ValuesList {
        get { return result.values_; }
      }
      public int ValuesCount {
        get { return result.ValuesCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.Value GetValues(int index) {
        return result.GetValues(index);
      }
      public Builder SetValues(int index, global::Rhino.DistributedHashTable.Protocol.Value value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.values_[index] = value;
        return this;
      }
      public Builder SetValues(int index, global::Rhino.DistributedHashTable.Protocol.Value.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.values_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddValues(global::Rhino.DistributedHashTable.Protocol.Value value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.values_.Add(value);
        return this;
      }
      public Builder AddValues(global::Rhino.DistributedHashTable.Protocol.Value.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.values_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeValues(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.Value> values) {
        base.AddRange(values, result.values_);
        return this;
      }
      public Builder ClearValues() {
        result.values_.Clear();
        return this;
      }
    }
  }
  
  public sealed partial class RemoveRequestMessage : pb::GeneratedMessage<RemoveRequestMessage, RemoveRequestMessage.Builder> {
    private static readonly RemoveRequestMessage defaultInstance = new Builder().BuildPartial();
    public static RemoveRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RemoveRequestMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RemoveRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_RemoveRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RemoveRequestMessage, RemoveRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_RemoveRequestMessage__FieldAccessorTable; }
    }
    
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    private bool hasSegment;
    private int segment_ = 0;
    public bool HasSegment {
      get { return hasSegment; }
    }
    public int Segment {
      get { return segment_; }
    }
    
    private bool hasIsReplicationRequest;
    private bool isReplicationRequest_ = false;
    public bool HasIsReplicationRequest {
      get { return hasIsReplicationRequest; }
    }
    public bool IsReplicationRequest {
      get { return isReplicationRequest_; }
    }
    
    private bool hasSpecificVersion;
    private global::Rhino.DistributedHashTable.Protocol.ValueVersion specificVersion_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance;
    public bool HasSpecificVersion {
      get { return hasSpecificVersion; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ValueVersion SpecificVersion {
      get { return specificVersion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        if (!hasSegment) return false;
        if (!hasIsReplicationRequest) return false;
        if (HasSpecificVersion) {
          if (!SpecificVersion.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasKey) {
        output.WriteString(1, Key);
      }
      if (HasSegment) {
        output.WriteInt32(2, Segment);
      }
      if (HasSpecificVersion) {
        output.WriteMessage(3, SpecificVersion);
      }
      if (HasIsReplicationRequest) {
        output.WriteBool(4, IsReplicationRequest);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Key);
        }
        if (HasSegment) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Segment);
        }
        if (HasIsReplicationRequest) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, IsReplicationRequest);
        }
        if (HasSpecificVersion) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SpecificVersion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RemoveRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RemoveRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RemoveRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RemoveRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RemoveRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RemoveRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RemoveRequestMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RemoveRequestMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RemoveRequestMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<RemoveRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RemoveRequestMessage result = new RemoveRequestMessage();
      
      protected override RemoveRequestMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RemoveRequestMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return RemoveRequestMessage.Descriptor; }
      }
      
      public override RemoveRequestMessage DefaultInstanceForType {
        get { return RemoveRequestMessage.DefaultInstance; }
      }
      
      public override RemoveRequestMessage BuildPartial() {
        RemoveRequestMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RemoveRequestMessage) {
          return MergeFrom((RemoveRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RemoveRequestMessage other) {
        if (other == RemoveRequestMessage.DefaultInstance) return this;
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasSegment) {
          Segment = other.Segment;
        }
        if (other.HasIsReplicationRequest) {
          IsReplicationRequest = other.IsReplicationRequest;
        }
        if (other.HasSpecificVersion) {
          MergeSpecificVersion(other.SpecificVersion);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Key = input.ReadString();
              break;
            }
            case 16: {
              Segment = input.ReadInt32();
              break;
            }
            case 26: {
              global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.ValueVersion.CreateBuilder();
              if (HasSpecificVersion) {
                subBuilder.MergeFrom(SpecificVersion);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SpecificVersion = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              IsReplicationRequest = input.ReadBool();
              break;
            }
          }
        }
      }
      
      
      public bool HasKey {
        get { return result.HasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasSegment {
        get { return result.HasSegment; }
      }
      public int Segment {
        get { return result.Segment; }
        set { SetSegment(value); }
      }
      public Builder SetSegment(int value) {
        result.hasSegment = true;
        result.segment_ = value;
        return this;
      }
      public Builder ClearSegment() {
        result.hasSegment = false;
        result.segment_ = 0;
        return this;
      }
      
      public bool HasIsReplicationRequest {
        get { return result.HasIsReplicationRequest; }
      }
      public bool IsReplicationRequest {
        get { return result.IsReplicationRequest; }
        set { SetIsReplicationRequest(value); }
      }
      public Builder SetIsReplicationRequest(bool value) {
        result.hasIsReplicationRequest = true;
        result.isReplicationRequest_ = value;
        return this;
      }
      public Builder ClearIsReplicationRequest() {
        result.hasIsReplicationRequest = false;
        result.isReplicationRequest_ = false;
        return this;
      }
      
      public bool HasSpecificVersion {
       get { return result.HasSpecificVersion; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ValueVersion SpecificVersion {
        get { return result.SpecificVersion; }
        set { SetSpecificVersion(value); }
      }
      public Builder SetSpecificVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSpecificVersion = true;
        result.specificVersion_ = value;
        return this;
      }
      public Builder SetSpecificVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSpecificVersion = true;
        result.specificVersion_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSpecificVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSpecificVersion &&
            result.specificVersion_ != global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance) {
            result.specificVersion_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.CreateBuilder(result.specificVersion_).MergeFrom(value).BuildPartial();
        } else {
          result.specificVersion_ = value;
        }
        result.hasSpecificVersion = true;
        return this;
      }
      public Builder ClearSpecificVersion() {
        result.hasSpecificVersion = false;
        result.specificVersion_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance;
        return this;
      }
    }
  }
  
  public sealed partial class PutRequestMessage : pb::GeneratedMessage<PutRequestMessage, PutRequestMessage.Builder> {
    private static readonly PutRequestMessage defaultInstance = new Builder().BuildPartial();
    public static PutRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PutRequestMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override PutRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_PutRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PutRequestMessage, PutRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_PutRequestMessage__FieldAccessorTable; }
    }
    
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    private bool hasSegment;
    private int segment_ = 0;
    public bool HasSegment {
      get { return hasSegment; }
    }
    public int Segment {
      get { return segment_; }
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.ValueVersion> parentVersions_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.ValueVersion>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.ValueVersion> ParentVersionsList {
      get { return parentVersions_; }
    }
    public int ParentVersionsCount {
      get { return parentVersions_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ValueVersion GetParentVersions(int index) {
      return parentVersions_[index];
    }
    
    private bool hasOptimisticConcurrency;
    private bool optimisticConcurrency_ = false;
    public bool HasOptimisticConcurrency {
      get { return hasOptimisticConcurrency; }
    }
    public bool OptimisticConcurrency {
      get { return optimisticConcurrency_; }
    }
    
    private bool hasIsReadOnly;
    private bool isReadOnly_ = false;
    public bool HasIsReadOnly {
      get { return hasIsReadOnly; }
    }
    public bool IsReadOnly {
      get { return isReadOnly_; }
    }
    
    private bool hasBytes;
    private pb::ByteString bytes_ = pb::ByteString.Empty;
    public bool HasBytes {
      get { return hasBytes; }
    }
    public pb::ByteString Bytes {
      get { return bytes_; }
    }
    
    private bool hasIsReplicationRequest;
    private bool isReplicationRequest_ = false;
    public bool HasIsReplicationRequest {
      get { return hasIsReplicationRequest; }
    }
    public bool IsReplicationRequest {
      get { return isReplicationRequest_; }
    }
    
    private bool hasReplicationVersion;
    private global::Rhino.DistributedHashTable.Protocol.ValueVersion replicationVersion_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance;
    public bool HasReplicationVersion {
      get { return hasReplicationVersion; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ValueVersion ReplicationVersion {
      get { return replicationVersion_; }
    }
    
    private bool hasExpiresAtAsDouble;
    private double? expiresAtAsDouble_ = 0D;
    public bool HasExpiresAtAsDouble {
      get { return hasExpiresAtAsDouble && expiresAtAsDouble_.HasValue; }
    }
    public double? ExpiresAtAsDouble {
      get { return expiresAtAsDouble_; }
    }
    
    private bool hasReplicationTimeStampAsDouble;
    private double? replicationTimeStampAsDouble_ = 0D;
    public bool HasReplicationTimeStampAsDouble {
      get { return hasReplicationTimeStampAsDouble && replicationTimeStampAsDouble_.HasValue; }
    }
    public double? ReplicationTimeStampAsDouble {
      get { return replicationTimeStampAsDouble_; }
    }
    
    private bool hasTag;
    private int? tag_ = 0;
    public bool HasTag {
      get { return hasTag && tag_.HasValue; }
    }
    public int? Tag {
      get { return tag_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        if (!hasSegment) return false;
        if (!hasOptimisticConcurrency) return false;
        if (!hasIsReadOnly) return false;
        if (!hasBytes) return false;
        if (!hasIsReplicationRequest) return false;
        foreach (global::Rhino.DistributedHashTable.Protocol.ValueVersion element in ParentVersionsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasReplicationVersion) {
          if (!ReplicationVersion.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasKey) {
        output.WriteString(1, Key);
      }
      if (HasSegment) {
        output.WriteInt32(2, Segment);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.ValueVersion element in ParentVersionsList) {
        output.WriteMessage(3, element);
      }
      if (HasOptimisticConcurrency) {
        output.WriteBool(4, OptimisticConcurrency);
      }
      if (HasIsReadOnly) {
        output.WriteBool(5, IsReadOnly);
      }
      if (HasBytes) {
        output.WriteBytes(6, Bytes);
      }
      if (HasReplicationVersion) {
        output.WriteMessage(7, ReplicationVersion);
      }
      if (HasExpiresAtAsDouble) {
        output.WriteDouble(8, ExpiresAtAsDouble.Value);
      }
      if (HasReplicationTimeStampAsDouble) {
        output.WriteDouble(9, ReplicationTimeStampAsDouble.Value);
      }
      if (HasTag) {
        output.WriteInt32(10, Tag.Value);
      }
      if (HasIsReplicationRequest) {
        output.WriteBool(11, IsReplicationRequest);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Key);
        }
        if (HasSegment) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Segment);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.ValueVersion element in ParentVersionsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (HasOptimisticConcurrency) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, OptimisticConcurrency);
        }
        if (HasIsReadOnly) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, IsReadOnly);
        }
        if (HasBytes) {
          size += pb::CodedOutputStream.ComputeBytesSize(6, Bytes);
        }
        if (HasIsReplicationRequest) {
          size += pb::CodedOutputStream.ComputeBoolSize(11, IsReplicationRequest);
        }
        if (HasReplicationVersion) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, ReplicationVersion);
        }
        if (HasExpiresAtAsDouble) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, ExpiresAtAsDouble.Value);
        }
        if (HasReplicationTimeStampAsDouble) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, ReplicationTimeStampAsDouble.Value);
        }
        if (HasTag) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, Tag.Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PutRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PutRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PutRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PutRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PutRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PutRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PutRequestMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PutRequestMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PutRequestMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<PutRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      PutRequestMessage result = new PutRequestMessage();
      
      protected override PutRequestMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new PutRequestMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return PutRequestMessage.Descriptor; }
      }
      
      public override PutRequestMessage DefaultInstanceForType {
        get { return PutRequestMessage.DefaultInstance; }
      }
      
      public override PutRequestMessage BuildPartial() {
        result.parentVersions_.MakeReadOnly();
        PutRequestMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PutRequestMessage) {
          return MergeFrom((PutRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PutRequestMessage other) {
        if (other == PutRequestMessage.DefaultInstance) return this;
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasSegment) {
          Segment = other.Segment;
        }
        if (other.parentVersions_.Count != 0) {
          base.AddRange(other.parentVersions_, result.parentVersions_);
        }
        if (other.HasOptimisticConcurrency) {
          OptimisticConcurrency = other.OptimisticConcurrency;
        }
        if (other.HasIsReadOnly) {
          IsReadOnly = other.IsReadOnly;
        }
        if (other.HasBytes) {
          Bytes = other.Bytes;
        }
        if (other.HasIsReplicationRequest) {
          IsReplicationRequest = other.IsReplicationRequest;
        }
        if (other.HasReplicationVersion) {
          MergeReplicationVersion(other.ReplicationVersion);
        }
        if (other.HasExpiresAtAsDouble) {
          ExpiresAtAsDouble = other.ExpiresAtAsDouble;
        }
        if (other.HasReplicationTimeStampAsDouble) {
          ReplicationTimeStampAsDouble = other.ReplicationTimeStampAsDouble;
        }
        if (other.HasTag) {
          Tag = other.Tag;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Key = input.ReadString();
              break;
            }
            case 16: {
              Segment = input.ReadInt32();
              break;
            }
            case 26: {
              global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.ValueVersion.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddParentVersions(subBuilder.BuildPartial());
              break;
            }
            case 32: {
              OptimisticConcurrency = input.ReadBool();
              break;
            }
            case 40: {
              IsReadOnly = input.ReadBool();
              break;
            }
            case 50: {
              Bytes = input.ReadBytes();
              break;
            }
            case 58: {
              global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.ValueVersion.CreateBuilder();
              if (HasReplicationVersion) {
                subBuilder.MergeFrom(ReplicationVersion);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReplicationVersion = subBuilder.BuildPartial();
              break;
            }
            case 65: {
              ExpiresAtAsDouble = input.ReadDouble();
              break;
            }
            case 73: {
              ReplicationTimeStampAsDouble = input.ReadDouble();
              break;
            }
            case 80: {
              Tag = input.ReadInt32();
              break;
            }
            case 88: {
              IsReplicationRequest = input.ReadBool();
              break;
            }
          }
        }
      }
      
      
      public bool HasKey {
        get { return result.HasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasSegment {
        get { return result.HasSegment; }
      }
      public int Segment {
        get { return result.Segment; }
        set { SetSegment(value); }
      }
      public Builder SetSegment(int value) {
        result.hasSegment = true;
        result.segment_ = value;
        return this;
      }
      public Builder ClearSegment() {
        result.hasSegment = false;
        result.segment_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.ValueVersion> ParentVersionsList {
        get { return result.parentVersions_; }
      }
      public int ParentVersionsCount {
        get { return result.ParentVersionsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ValueVersion GetParentVersions(int index) {
        return result.GetParentVersions(index);
      }
      public Builder SetParentVersions(int index, global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.parentVersions_[index] = value;
        return this;
      }
      public Builder SetParentVersions(int index, global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.parentVersions_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddParentVersions(global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.parentVersions_.Add(value);
        return this;
      }
      public Builder AddParentVersions(global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.parentVersions_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeParentVersions(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.ValueVersion> values) {
        base.AddRange(values, result.parentVersions_);
        return this;
      }
      public Builder ClearParentVersions() {
        result.parentVersions_.Clear();
        return this;
      }
      
      public bool HasOptimisticConcurrency {
        get { return result.HasOptimisticConcurrency; }
      }
      public bool OptimisticConcurrency {
        get { return result.OptimisticConcurrency; }
        set { SetOptimisticConcurrency(value); }
      }
      public Builder SetOptimisticConcurrency(bool value) {
        result.hasOptimisticConcurrency = true;
        result.optimisticConcurrency_ = value;
        return this;
      }
      public Builder ClearOptimisticConcurrency() {
        result.hasOptimisticConcurrency = false;
        result.optimisticConcurrency_ = false;
        return this;
      }
      
      public bool HasIsReadOnly {
        get { return result.HasIsReadOnly; }
      }
      public bool IsReadOnly {
        get { return result.IsReadOnly; }
        set { SetIsReadOnly(value); }
      }
      public Builder SetIsReadOnly(bool value) {
        result.hasIsReadOnly = true;
        result.isReadOnly_ = value;
        return this;
      }
      public Builder ClearIsReadOnly() {
        result.hasIsReadOnly = false;
        result.isReadOnly_ = false;
        return this;
      }
      
      public bool HasBytes {
        get { return result.HasBytes; }
      }
      public pb::ByteString Bytes {
        get { return result.Bytes; }
        set { SetBytes(value); }
      }
      public Builder SetBytes(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBytes = true;
        result.bytes_ = value;
        return this;
      }
      public Builder ClearBytes() {
        result.hasBytes = false;
        result.bytes_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasIsReplicationRequest {
        get { return result.HasIsReplicationRequest; }
      }
      public bool IsReplicationRequest {
        get { return result.IsReplicationRequest; }
        set { SetIsReplicationRequest(value); }
      }
      public Builder SetIsReplicationRequest(bool value) {
        result.hasIsReplicationRequest = true;
        result.isReplicationRequest_ = value;
        return this;
      }
      public Builder ClearIsReplicationRequest() {
        result.hasIsReplicationRequest = false;
        result.isReplicationRequest_ = false;
        return this;
      }
      
      public bool HasReplicationVersion {
       get { return result.HasReplicationVersion; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ValueVersion ReplicationVersion {
        get { return result.ReplicationVersion; }
        set { SetReplicationVersion(value); }
      }
      public Builder SetReplicationVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReplicationVersion = true;
        result.replicationVersion_ = value;
        return this;
      }
      public Builder SetReplicationVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasReplicationVersion = true;
        result.replicationVersion_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReplicationVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasReplicationVersion &&
            result.replicationVersion_ != global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance) {
            result.replicationVersion_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.CreateBuilder(result.replicationVersion_).MergeFrom(value).BuildPartial();
        } else {
          result.replicationVersion_ = value;
        }
        result.hasReplicationVersion = true;
        return this;
      }
      public Builder ClearReplicationVersion() {
        result.hasReplicationVersion = false;
        result.replicationVersion_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance;
        return this;
      }
      
      public bool HasExpiresAtAsDouble {
        get { return result.HasExpiresAtAsDouble; }
      }
      public double? ExpiresAtAsDouble {
        get { return result.ExpiresAtAsDouble; }
        set { SetExpiresAtAsDouble(value); }
      }
      public Builder SetExpiresAtAsDouble(double? value) {
        result.hasExpiresAtAsDouble = true;
        result.expiresAtAsDouble_ = value;
        return this;
      }
      public Builder ClearExpiresAtAsDouble() {
        result.hasExpiresAtAsDouble = false;
        result.expiresAtAsDouble_ = 0D;
        return this;
      }
      
      public bool HasReplicationTimeStampAsDouble {
        get { return result.HasReplicationTimeStampAsDouble; }
      }
      public double? ReplicationTimeStampAsDouble {
        get { return result.ReplicationTimeStampAsDouble; }
        set { SetReplicationTimeStampAsDouble(value); }
      }
      public Builder SetReplicationTimeStampAsDouble(double? value) {
        result.hasReplicationTimeStampAsDouble = true;
        result.replicationTimeStampAsDouble_ = value;
        return this;
      }
      public Builder ClearReplicationTimeStampAsDouble() {
        result.hasReplicationTimeStampAsDouble = false;
        result.replicationTimeStampAsDouble_ = 0D;
        return this;
      }
      
      public bool HasTag {
        get { return result.HasTag; }
      }
      public int? Tag {
        get { return result.Tag; }
        set { SetTag(value); }
      }
      public Builder SetTag(int? value) {
        result.hasTag = true;
        result.tag_ = value;
        return this;
      }
      public Builder ClearTag() {
        result.hasTag = false;
        result.tag_ = 0;
        return this;
      }
    }
  }
  
  public sealed partial class PutResponseMessage : pb::GeneratedMessage<PutResponseMessage, PutResponseMessage.Builder> {
    private static readonly PutResponseMessage defaultInstance = new Builder().BuildPartial();
    public static PutResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PutResponseMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override PutResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_PutResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PutResponseMessage, PutResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_PutResponseMessage__FieldAccessorTable; }
    }
    
    private bool hasVersion;
    private global::Rhino.DistributedHashTable.Protocol.ValueVersion version_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ValueVersion Version {
      get { return version_; }
    }
    
    private bool hasConflictExists;
    private bool conflictExists_ = false;
    public bool HasConflictExists {
      get { return hasConflictExists; }
    }
    public bool ConflictExists {
      get { return conflictExists_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasConflictExists) return false;
        if (!Version.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasVersion) {
        output.WriteMessage(1, Version);
      }
      if (HasConflictExists) {
        output.WriteBool(2, ConflictExists);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Version);
        }
        if (HasConflictExists) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, ConflictExists);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PutResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PutResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PutResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PutResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PutResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PutResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PutResponseMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PutResponseMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PutResponseMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<PutResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      PutResponseMessage result = new PutResponseMessage();
      
      protected override PutResponseMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new PutResponseMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return PutResponseMessage.Descriptor; }
      }
      
      public override PutResponseMessage DefaultInstanceForType {
        get { return PutResponseMessage.DefaultInstance; }
      }
      
      public override PutResponseMessage BuildPartial() {
        PutResponseMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PutResponseMessage) {
          return MergeFrom((PutResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PutResponseMessage other) {
        if (other == PutResponseMessage.DefaultInstance) return this;
        if (other.HasVersion) {
          MergeVersion(other.Version);
        }
        if (other.HasConflictExists) {
          ConflictExists = other.ConflictExists;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.ValueVersion.CreateBuilder();
              if (HasVersion) {
                subBuilder.MergeFrom(Version);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Version = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              ConflictExists = input.ReadBool();
              break;
            }
          }
        }
      }
      
      
      public bool HasVersion {
       get { return result.HasVersion; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ValueVersion Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder SetVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasVersion = true;
        result.version_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVersion(global::Rhino.DistributedHashTable.Protocol.ValueVersion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasVersion &&
            result.version_ != global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance) {
            result.version_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.CreateBuilder(result.version_).MergeFrom(value).BuildPartial();
        } else {
          result.version_ = value;
        }
        result.hasVersion = true;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = global::Rhino.DistributedHashTable.Protocol.ValueVersion.DefaultInstance;
        return this;
      }
      
      public bool HasConflictExists {
        get { return result.HasConflictExists; }
      }
      public bool ConflictExists {
        get { return result.ConflictExists; }
        set { SetConflictExists(value); }
      }
      public Builder SetConflictExists(bool value) {
        result.hasConflictExists = true;
        result.conflictExists_ = value;
        return this;
      }
      public Builder ClearConflictExists() {
        result.hasConflictExists = false;
        result.conflictExists_ = false;
        return this;
      }
    }
  }
  
  public sealed partial class RemoveResponseMessage : pb::GeneratedMessage<RemoveResponseMessage, RemoveResponseMessage.Builder> {
    private static readonly RemoveResponseMessage defaultInstance = new Builder().BuildPartial();
    public static RemoveResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RemoveResponseMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RemoveResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_RemoveResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RemoveResponseMessage, RemoveResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_RemoveResponseMessage__FieldAccessorTable; }
    }
    
    private bool hasWasRemoved;
    private bool wasRemoved_ = false;
    public bool HasWasRemoved {
      get { return hasWasRemoved; }
    }
    public bool WasRemoved {
      get { return wasRemoved_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWasRemoved) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasWasRemoved) {
        output.WriteBool(1, WasRemoved);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasWasRemoved) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, WasRemoved);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RemoveResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RemoveResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RemoveResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RemoveResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RemoveResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RemoveResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RemoveResponseMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RemoveResponseMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RemoveResponseMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<RemoveResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RemoveResponseMessage result = new RemoveResponseMessage();
      
      protected override RemoveResponseMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RemoveResponseMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return RemoveResponseMessage.Descriptor; }
      }
      
      public override RemoveResponseMessage DefaultInstanceForType {
        get { return RemoveResponseMessage.DefaultInstance; }
      }
      
      public override RemoveResponseMessage BuildPartial() {
        RemoveResponseMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RemoveResponseMessage) {
          return MergeFrom((RemoveResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RemoveResponseMessage other) {
        if (other == RemoveResponseMessage.DefaultInstance) return this;
        if (other.HasWasRemoved) {
          WasRemoved = other.WasRemoved;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              WasRemoved = input.ReadBool();
              break;
            }
          }
        }
      }
      
      
      public bool HasWasRemoved {
        get { return result.HasWasRemoved; }
      }
      public bool WasRemoved {
        get { return result.WasRemoved; }
        set { SetWasRemoved(value); }
      }
      public Builder SetWasRemoved(bool value) {
        result.hasWasRemoved = true;
        result.wasRemoved_ = value;
        return this;
      }
      public Builder ClearWasRemoved() {
        result.hasWasRemoved = false;
        result.wasRemoved_ = false;
        return this;
      }
    }
  }
  
  public sealed partial class ErrorMessage : pb::GeneratedMessage<ErrorMessage, ErrorMessage.Builder> {
    private static readonly ErrorMessage defaultInstance = new Builder().BuildPartial();
    public static ErrorMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ErrorMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ErrorMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_ErrorMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ErrorMessage, ErrorMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_ErrorMessage__FieldAccessorTable; }
    }
    
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasMessage) {
        output.WriteString(1, Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Message);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ErrorMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ErrorMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ErrorMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ErrorMessage result = new ErrorMessage();
      
      protected override ErrorMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ErrorMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return ErrorMessage.Descriptor; }
      }
      
      public override ErrorMessage DefaultInstanceForType {
        get { return ErrorMessage.DefaultInstance; }
      }
      
      public override ErrorMessage BuildPartial() {
        ErrorMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ErrorMessage) {
          return MergeFrom((ErrorMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ErrorMessage other) {
        if (other == ErrorMessage.DefaultInstance) return this;
        if (other.HasMessage) {
          Message = other.Message;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Message = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasMessage {
        get { return result.HasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
  }
  
  public sealed partial class AssignAllEmptySegmentsRequestMessage : pb::GeneratedMessage<AssignAllEmptySegmentsRequestMessage, AssignAllEmptySegmentsRequestMessage.Builder> {
    private static readonly AssignAllEmptySegmentsRequestMessage defaultInstance = new Builder().BuildPartial();
    public static AssignAllEmptySegmentsRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AssignAllEmptySegmentsRequestMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override AssignAllEmptySegmentsRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_AssignAllEmptySegmentsRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AssignAllEmptySegmentsRequestMessage, AssignAllEmptySegmentsRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_AssignAllEmptySegmentsRequestMessage__FieldAccessorTable; }
    }
    
    private bool hasReplicationEndpoint;
    private global::Rhino.DistributedHashTable.Protocol.NodeEndpoint replicationEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
    public bool HasReplicationEndpoint {
      get { return hasReplicationEndpoint; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint ReplicationEndpoint {
      get { return replicationEndpoint_; }
    }
    
    private pbc::PopsicleList<int> segments_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SegmentsList {
      get { return pbc::Lists.AsReadOnly(segments_); }
    }
    public int SegmentsCount {
      get { return segments_.Count; }
    }
    public int GetSegments(int index) {
      return segments_[index];
    }
    
    private bool hasType;
    private global::Rhino.DistributedHashTable.Protocol.ReplicationType type_ = global::Rhino.DistributedHashTable.Protocol.ReplicationType.Ownership;
    public bool HasType {
      get { return hasType; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ReplicationType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReplicationEndpoint) return false;
        if (!hasType) return false;
        if (!ReplicationEndpoint.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasReplicationEndpoint) {
        output.WriteMessage(1, ReplicationEndpoint);
      }
      if (segments_.Count > 0) {
        foreach (int element in segments_) {
          output.WriteInt32(2, element);
        }
      }
      if (HasType) {
        output.WriteEnum(3, (int) Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasReplicationEndpoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ReplicationEndpoint);
        }
        {
          int dataSize = 0;
          foreach (int element in SegmentsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * segments_.Count;
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AssignAllEmptySegmentsRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AssignAllEmptySegmentsRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AssignAllEmptySegmentsRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AssignAllEmptySegmentsRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AssignAllEmptySegmentsRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AssignAllEmptySegmentsRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AssignAllEmptySegmentsRequestMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AssignAllEmptySegmentsRequestMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AssignAllEmptySegmentsRequestMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<AssignAllEmptySegmentsRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      AssignAllEmptySegmentsRequestMessage result = new AssignAllEmptySegmentsRequestMessage();
      
      protected override AssignAllEmptySegmentsRequestMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new AssignAllEmptySegmentsRequestMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return AssignAllEmptySegmentsRequestMessage.Descriptor; }
      }
      
      public override AssignAllEmptySegmentsRequestMessage DefaultInstanceForType {
        get { return AssignAllEmptySegmentsRequestMessage.DefaultInstance; }
      }
      
      public override AssignAllEmptySegmentsRequestMessage BuildPartial() {
        result.segments_.MakeReadOnly();
        AssignAllEmptySegmentsRequestMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AssignAllEmptySegmentsRequestMessage) {
          return MergeFrom((AssignAllEmptySegmentsRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AssignAllEmptySegmentsRequestMessage other) {
        if (other == AssignAllEmptySegmentsRequestMessage.DefaultInstance) return this;
        if (other.HasReplicationEndpoint) {
          MergeReplicationEndpoint(other.ReplicationEndpoint);
        }
        if (other.segments_.Count != 0) {
          base.AddRange(other.segments_, result.segments_);
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              if (HasReplicationEndpoint) {
                subBuilder.MergeFrom(ReplicationEndpoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReplicationEndpoint = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              AddSegments(input.ReadInt32());
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Rhino.DistributedHashTable.Protocol.ReplicationType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                Type = (global::Rhino.DistributedHashTable.Protocol.ReplicationType) rawValue;
              }
              break;
            }
          }
        }
      }
      
      
      public bool HasReplicationEndpoint {
       get { return result.HasReplicationEndpoint; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint ReplicationEndpoint {
        get { return result.ReplicationEndpoint; }
        set { SetReplicationEndpoint(value); }
      }
      public Builder SetReplicationEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReplicationEndpoint = true;
        result.replicationEndpoint_ = value;
        return this;
      }
      public Builder SetReplicationEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasReplicationEndpoint = true;
        result.replicationEndpoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReplicationEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasReplicationEndpoint &&
            result.replicationEndpoint_ != global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance) {
            result.replicationEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder(result.replicationEndpoint_).MergeFrom(value).BuildPartial();
        } else {
          result.replicationEndpoint_ = value;
        }
        result.hasReplicationEndpoint = true;
        return this;
      }
      public Builder ClearReplicationEndpoint() {
        result.hasReplicationEndpoint = false;
        result.replicationEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<int> SegmentsList {
        get { return result.segments_; }
      }
      public int SegmentsCount {
        get { return result.SegmentsCount; }
      }
      public int GetSegments(int index) {
        return result.GetSegments(index);
      }
      public Builder SetSegments(int index, int value) {
        result.segments_[index] = value;
        return this;
      }
      public Builder AddSegments(int value) {
        result.segments_.Add(value);
        return this;
      }
      public Builder AddRangeSegments(scg::IEnumerable<int> values) {
        base.AddRange(values, result.segments_);
        return this;
      }
      public Builder ClearSegments() {
        result.segments_.Clear();
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ReplicationType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Rhino.DistributedHashTable.Protocol.ReplicationType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::Rhino.DistributedHashTable.Protocol.ReplicationType.Ownership;
        return this;
      }
    }
  }
  
  public sealed partial class AssignAllEmptySegmentsResponseMessage : pb::GeneratedMessage<AssignAllEmptySegmentsResponseMessage, AssignAllEmptySegmentsResponseMessage.Builder> {
    private static readonly AssignAllEmptySegmentsResponseMessage defaultInstance = new Builder().BuildPartial();
    public static AssignAllEmptySegmentsResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AssignAllEmptySegmentsResponseMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override AssignAllEmptySegmentsResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_AssignAllEmptySegmentsResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AssignAllEmptySegmentsResponseMessage, AssignAllEmptySegmentsResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_AssignAllEmptySegmentsResponseMessage__FieldAccessorTable; }
    }
    
    private pbc::PopsicleList<int> assignedSegments_ = new pbc::PopsicleList<int>();
    public scg::IList<int> AssignedSegmentsList {
      get { return pbc::Lists.AsReadOnly(assignedSegments_); }
    }
    public int AssignedSegmentsCount {
      get { return assignedSegments_.Count; }
    }
    public int GetAssignedSegments(int index) {
      return assignedSegments_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (assignedSegments_.Count > 0) {
        foreach (int element in assignedSegments_) {
          output.WriteInt32(2, element);
        }
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (int element in AssignedSegmentsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * assignedSegments_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AssignAllEmptySegmentsResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AssignAllEmptySegmentsResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AssignAllEmptySegmentsResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AssignAllEmptySegmentsResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AssignAllEmptySegmentsResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AssignAllEmptySegmentsResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AssignAllEmptySegmentsResponseMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AssignAllEmptySegmentsResponseMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AssignAllEmptySegmentsResponseMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<AssignAllEmptySegmentsResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      AssignAllEmptySegmentsResponseMessage result = new AssignAllEmptySegmentsResponseMessage();
      
      protected override AssignAllEmptySegmentsResponseMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new AssignAllEmptySegmentsResponseMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return AssignAllEmptySegmentsResponseMessage.Descriptor; }
      }
      
      public override AssignAllEmptySegmentsResponseMessage DefaultInstanceForType {
        get { return AssignAllEmptySegmentsResponseMessage.DefaultInstance; }
      }
      
      public override AssignAllEmptySegmentsResponseMessage BuildPartial() {
        result.assignedSegments_.MakeReadOnly();
        AssignAllEmptySegmentsResponseMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AssignAllEmptySegmentsResponseMessage) {
          return MergeFrom((AssignAllEmptySegmentsResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AssignAllEmptySegmentsResponseMessage other) {
        if (other == AssignAllEmptySegmentsResponseMessage.DefaultInstance) return this;
        if (other.assignedSegments_.Count != 0) {
          base.AddRange(other.assignedSegments_, result.assignedSegments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 16: {
              AddAssignedSegments(input.ReadInt32());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<int> AssignedSegmentsList {
        get { return result.assignedSegments_; }
      }
      public int AssignedSegmentsCount {
        get { return result.AssignedSegmentsCount; }
      }
      public int GetAssignedSegments(int index) {
        return result.GetAssignedSegments(index);
      }
      public Builder SetAssignedSegments(int index, int value) {
        result.assignedSegments_[index] = value;
        return this;
      }
      public Builder AddAssignedSegments(int value) {
        result.assignedSegments_.Add(value);
        return this;
      }
      public Builder AddRangeAssignedSegments(scg::IEnumerable<int> values) {
        base.AddRange(values, result.assignedSegments_);
        return this;
      }
      public Builder ClearAssignedSegments() {
        result.assignedSegments_.Clear();
        return this;
      }
    }
  }
  
  public sealed partial class ReplicateNextPageRequestMessage : pb::GeneratedMessage<ReplicateNextPageRequestMessage, ReplicateNextPageRequestMessage.Builder> {
    private static readonly ReplicateNextPageRequestMessage defaultInstance = new Builder().BuildPartial();
    public static ReplicateNextPageRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ReplicateNextPageRequestMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ReplicateNextPageRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_ReplicateNextPageRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ReplicateNextPageRequestMessage, ReplicateNextPageRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_ReplicateNextPageRequestMessage__FieldAccessorTable; }
    }
    
    private bool hasReplicationEndpoint;
    private global::Rhino.DistributedHashTable.Protocol.NodeEndpoint replicationEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
    public bool HasReplicationEndpoint {
      get { return hasReplicationEndpoint; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint ReplicationEndpoint {
      get { return replicationEndpoint_; }
    }
    
    private bool hasSegment;
    private int segment_ = 0;
    public bool HasSegment {
      get { return hasSegment; }
    }
    public int Segment {
      get { return segment_; }
    }
    
    private bool hasType;
    private global::Rhino.DistributedHashTable.Protocol.ReplicationType type_ = global::Rhino.DistributedHashTable.Protocol.ReplicationType.Ownership;
    public bool HasType {
      get { return hasType; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ReplicationType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReplicationEndpoint) return false;
        if (!hasSegment) return false;
        if (!hasType) return false;
        if (!ReplicationEndpoint.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasReplicationEndpoint) {
        output.WriteMessage(1, ReplicationEndpoint);
      }
      if (HasSegment) {
        output.WriteInt32(2, Segment);
      }
      if (HasType) {
        output.WriteEnum(3, (int) Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasReplicationEndpoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ReplicationEndpoint);
        }
        if (HasSegment) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Segment);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ReplicateNextPageRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReplicateNextPageRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReplicateNextPageRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReplicateNextPageRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReplicateNextPageRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReplicateNextPageRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ReplicateNextPageRequestMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReplicateNextPageRequestMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ReplicateNextPageRequestMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ReplicateNextPageRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ReplicateNextPageRequestMessage result = new ReplicateNextPageRequestMessage();
      
      protected override ReplicateNextPageRequestMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ReplicateNextPageRequestMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return ReplicateNextPageRequestMessage.Descriptor; }
      }
      
      public override ReplicateNextPageRequestMessage DefaultInstanceForType {
        get { return ReplicateNextPageRequestMessage.DefaultInstance; }
      }
      
      public override ReplicateNextPageRequestMessage BuildPartial() {
        ReplicateNextPageRequestMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ReplicateNextPageRequestMessage) {
          return MergeFrom((ReplicateNextPageRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReplicateNextPageRequestMessage other) {
        if (other == ReplicateNextPageRequestMessage.DefaultInstance) return this;
        if (other.HasReplicationEndpoint) {
          MergeReplicationEndpoint(other.ReplicationEndpoint);
        }
        if (other.HasSegment) {
          Segment = other.Segment;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              if (HasReplicationEndpoint) {
                subBuilder.MergeFrom(ReplicationEndpoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReplicationEndpoint = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              Segment = input.ReadInt32();
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Rhino.DistributedHashTable.Protocol.ReplicationType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                Type = (global::Rhino.DistributedHashTable.Protocol.ReplicationType) rawValue;
              }
              break;
            }
          }
        }
      }
      
      
      public bool HasReplicationEndpoint {
       get { return result.HasReplicationEndpoint; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint ReplicationEndpoint {
        get { return result.ReplicationEndpoint; }
        set { SetReplicationEndpoint(value); }
      }
      public Builder SetReplicationEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReplicationEndpoint = true;
        result.replicationEndpoint_ = value;
        return this;
      }
      public Builder SetReplicationEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasReplicationEndpoint = true;
        result.replicationEndpoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReplicationEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasReplicationEndpoint &&
            result.replicationEndpoint_ != global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance) {
            result.replicationEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder(result.replicationEndpoint_).MergeFrom(value).BuildPartial();
        } else {
          result.replicationEndpoint_ = value;
        }
        result.hasReplicationEndpoint = true;
        return this;
      }
      public Builder ClearReplicationEndpoint() {
        result.hasReplicationEndpoint = false;
        result.replicationEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
        return this;
      }
      
      public bool HasSegment {
        get { return result.HasSegment; }
      }
      public int Segment {
        get { return result.Segment; }
        set { SetSegment(value); }
      }
      public Builder SetSegment(int value) {
        result.hasSegment = true;
        result.segment_ = value;
        return this;
      }
      public Builder ClearSegment() {
        result.hasSegment = false;
        result.segment_ = 0;
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ReplicationType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Rhino.DistributedHashTable.Protocol.ReplicationType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::Rhino.DistributedHashTable.Protocol.ReplicationType.Ownership;
        return this;
      }
    }
  }
  
  public sealed partial class ReplicateNextPageResponseMessage : pb::GeneratedMessage<ReplicateNextPageResponseMessage, ReplicateNextPageResponseMessage.Builder> {
    private static readonly ReplicateNextPageResponseMessage defaultInstance = new Builder().BuildPartial();
    public static ReplicateNextPageResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ReplicateNextPageResponseMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ReplicateNextPageResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_ReplicateNextPageResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ReplicateNextPageResponseMessage, ReplicateNextPageResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_ReplicateNextPageResponseMessage__FieldAccessorTable; }
    }
    
    private bool hasDone;
    private bool done_ = false;
    public bool HasDone {
      get { return hasDone; }
    }
    public bool Done {
      get { return done_; }
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage> removeRequests_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage> RemoveRequestsList {
      get { return removeRequests_; }
    }
    public int RemoveRequestsCount {
      get { return removeRequests_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage GetRemoveRequests(int index) {
      return removeRequests_[index];
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.PutRequestMessage> putRequests_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.PutRequestMessage>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.PutRequestMessage> PutRequestsList {
      get { return putRequests_; }
    }
    public int PutRequestsCount {
      get { return putRequests_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.PutRequestMessage GetPutRequests(int index) {
      return putRequests_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDone) return false;
        foreach (global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage element in RemoveRequestsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.PutRequestMessage element in PutRequestsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasDone) {
        output.WriteBool(1, Done);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage element in RemoveRequestsList) {
        output.WriteMessage(2, element);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.PutRequestMessage element in PutRequestsList) {
        output.WriteMessage(3, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasDone) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Done);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage element in RemoveRequestsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.PutRequestMessage element in PutRequestsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ReplicateNextPageResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReplicateNextPageResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReplicateNextPageResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReplicateNextPageResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReplicateNextPageResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReplicateNextPageResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ReplicateNextPageResponseMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReplicateNextPageResponseMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ReplicateNextPageResponseMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ReplicateNextPageResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ReplicateNextPageResponseMessage result = new ReplicateNextPageResponseMessage();
      
      protected override ReplicateNextPageResponseMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ReplicateNextPageResponseMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return ReplicateNextPageResponseMessage.Descriptor; }
      }
      
      public override ReplicateNextPageResponseMessage DefaultInstanceForType {
        get { return ReplicateNextPageResponseMessage.DefaultInstance; }
      }
      
      public override ReplicateNextPageResponseMessage BuildPartial() {
        result.removeRequests_.MakeReadOnly();
        result.putRequests_.MakeReadOnly();
        ReplicateNextPageResponseMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ReplicateNextPageResponseMessage) {
          return MergeFrom((ReplicateNextPageResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReplicateNextPageResponseMessage other) {
        if (other == ReplicateNextPageResponseMessage.DefaultInstance) return this;
        if (other.HasDone) {
          Done = other.Done;
        }
        if (other.removeRequests_.Count != 0) {
          base.AddRange(other.removeRequests_, result.removeRequests_);
        }
        if (other.putRequests_.Count != 0) {
          base.AddRange(other.putRequests_, result.putRequests_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Done = input.ReadBool();
              break;
            }
            case 18: {
              global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddRemoveRequests(subBuilder.BuildPartial());
              break;
            }
            case 26: {
              global::Rhino.DistributedHashTable.Protocol.PutRequestMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.PutRequestMessage.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPutRequests(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasDone {
        get { return result.HasDone; }
      }
      public bool Done {
        get { return result.Done; }
        set { SetDone(value); }
      }
      public Builder SetDone(bool value) {
        result.hasDone = true;
        result.done_ = value;
        return this;
      }
      public Builder ClearDone() {
        result.hasDone = false;
        result.done_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage> RemoveRequestsList {
        get { return result.removeRequests_; }
      }
      public int RemoveRequestsCount {
        get { return result.RemoveRequestsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage GetRemoveRequests(int index) {
        return result.GetRemoveRequests(index);
      }
      public Builder SetRemoveRequests(int index, global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.removeRequests_[index] = value;
        return this;
      }
      public Builder SetRemoveRequests(int index, global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.removeRequests_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRemoveRequests(global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.removeRequests_.Add(value);
        return this;
      }
      public Builder AddRemoveRequests(global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.removeRequests_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRemoveRequests(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage> values) {
        base.AddRange(values, result.removeRequests_);
        return this;
      }
      public Builder ClearRemoveRequests() {
        result.removeRequests_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.PutRequestMessage> PutRequestsList {
        get { return result.putRequests_; }
      }
      public int PutRequestsCount {
        get { return result.PutRequestsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.PutRequestMessage GetPutRequests(int index) {
        return result.GetPutRequests(index);
      }
      public Builder SetPutRequests(int index, global::Rhino.DistributedHashTable.Protocol.PutRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.putRequests_[index] = value;
        return this;
      }
      public Builder SetPutRequests(int index, global::Rhino.DistributedHashTable.Protocol.PutRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.putRequests_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPutRequests(global::Rhino.DistributedHashTable.Protocol.PutRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.putRequests_.Add(value);
        return this;
      }
      public Builder AddPutRequests(global::Rhino.DistributedHashTable.Protocol.PutRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.putRequests_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePutRequests(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.PutRequestMessage> values) {
        base.AddRange(values, result.putRequests_);
        return this;
      }
      public Builder ClearPutRequests() {
        result.putRequests_.Clear();
        return this;
      }
    }
  }
  
  public sealed partial class SeeOtherErrorMessage : pb::GeneratedMessage<SeeOtherErrorMessage, SeeOtherErrorMessage.Builder> {
    private static readonly SeeOtherErrorMessage defaultInstance = new Builder().BuildPartial();
    public static SeeOtherErrorMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SeeOtherErrorMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SeeOtherErrorMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_SeeOtherErrorMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SeeOtherErrorMessage, SeeOtherErrorMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_SeeOtherErrorMessage__FieldAccessorTable; }
    }
    
    private bool hasOther;
    private global::Rhino.DistributedHashTable.Protocol.NodeEndpoint other_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
    public bool HasOther {
      get { return hasOther; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint Other {
      get { return other_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOther) return false;
        if (!Other.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasOther) {
        output.WriteMessage(1, Other);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasOther) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Other);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SeeOtherErrorMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SeeOtherErrorMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SeeOtherErrorMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SeeOtherErrorMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SeeOtherErrorMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SeeOtherErrorMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SeeOtherErrorMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SeeOtherErrorMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SeeOtherErrorMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SeeOtherErrorMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SeeOtherErrorMessage result = new SeeOtherErrorMessage();
      
      protected override SeeOtherErrorMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SeeOtherErrorMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return SeeOtherErrorMessage.Descriptor; }
      }
      
      public override SeeOtherErrorMessage DefaultInstanceForType {
        get { return SeeOtherErrorMessage.DefaultInstance; }
      }
      
      public override SeeOtherErrorMessage BuildPartial() {
        SeeOtherErrorMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SeeOtherErrorMessage) {
          return MergeFrom((SeeOtherErrorMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SeeOtherErrorMessage other) {
        if (other == SeeOtherErrorMessage.DefaultInstance) return this;
        if (other.HasOther) {
          MergeOther(other.Other);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              if (HasOther) {
                subBuilder.MergeFrom(Other);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Other = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasOther {
       get { return result.HasOther; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint Other {
        get { return result.Other; }
        set { SetOther(value); }
      }
      public Builder SetOther(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOther = true;
        result.other_ = value;
        return this;
      }
      public Builder SetOther(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOther = true;
        result.other_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOther(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOther &&
            result.other_ != global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance) {
            result.other_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder(result.other_).MergeFrom(value).BuildPartial();
        } else {
          result.other_ = value;
        }
        result.hasOther = true;
        return this;
      }
      public Builder ClearOther() {
        result.hasOther = false;
        result.other_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
        return this;
      }
    }
  }
  
  public sealed partial class MasterMessageUnion : pb::GeneratedMessage<MasterMessageUnion, MasterMessageUnion.Builder> {
    private static readonly MasterMessageUnion defaultInstance = new Builder().BuildPartial();
    public static MasterMessageUnion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MasterMessageUnion DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MasterMessageUnion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_MasterMessageUnion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MasterMessageUnion, MasterMessageUnion.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_MasterMessageUnion__FieldAccessorTable; }
    }
    
    private bool hasType;
    private global::Rhino.DistributedHashTable.Protocol.MasterMessageType type_ = global::Rhino.DistributedHashTable.Protocol.MasterMessageType.GetTopologyRequest;
    public bool HasType {
      get { return hasType; }
    }
    public global::Rhino.DistributedHashTable.Protocol.MasterMessageType Type {
      get { return type_; }
    }
    
    private bool hasJoinRequest;
    private global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage joinRequest_ = global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.DefaultInstance;
    public bool HasJoinRequest {
      get { return hasJoinRequest; }
    }
    public global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage JoinRequest {
      get { return joinRequest_; }
    }
    
    private bool hasJoinResponse;
    private global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage joinResponse_ = global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.DefaultInstance;
    public bool HasJoinResponse {
      get { return hasJoinResponse; }
    }
    public global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage JoinResponse {
      get { return joinResponse_; }
    }
    
    private bool hasTopology;
    private global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage topology_ = global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.DefaultInstance;
    public bool HasTopology {
      get { return hasTopology; }
    }
    public global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage Topology {
      get { return topology_; }
    }
    
    private bool hasException;
    private global::Rhino.DistributedHashTable.Protocol.ErrorMessage exception_ = global::Rhino.DistributedHashTable.Protocol.ErrorMessage.DefaultInstance;
    public bool HasException {
      get { return hasException; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ErrorMessage Exception {
      get { return exception_; }
    }
    
    private bool hasCaughtUp;
    private global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage caughtUp_ = global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage.DefaultInstance;
    public bool HasCaughtUp {
      get { return hasCaughtUp; }
    }
    public global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage CaughtUp {
      get { return caughtUp_; }
    }
    
    private bool hasGaveUp;
    private global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage gaveUp_ = global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage.DefaultInstance;
    public bool HasGaveUp {
      get { return hasGaveUp; }
    }
    public global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage GaveUp {
      get { return gaveUp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (HasJoinRequest) {
          if (!JoinRequest.IsInitialized) return false;
        }
        if (HasJoinResponse) {
          if (!JoinResponse.IsInitialized) return false;
        }
        if (HasTopology) {
          if (!Topology.IsInitialized) return false;
        }
        if (HasException) {
          if (!Exception.IsInitialized) return false;
        }
        if (HasCaughtUp) {
          if (!CaughtUp.IsInitialized) return false;
        }
        if (HasGaveUp) {
          if (!GaveUp.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteEnum(1, (int) Type);
      }
      if (HasJoinRequest) {
        output.WriteMessage(2, JoinRequest);
      }
      if (HasJoinResponse) {
        output.WriteMessage(3, JoinResponse);
      }
      if (HasTopology) {
        output.WriteMessage(4, Topology);
      }
      if (HasException) {
        output.WriteMessage(5, Exception);
      }
      if (HasCaughtUp) {
        output.WriteMessage(6, CaughtUp);
      }
      if (HasGaveUp) {
        output.WriteMessage(7, GaveUp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (HasJoinRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, JoinRequest);
        }
        if (HasJoinResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, JoinResponse);
        }
        if (HasTopology) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Topology);
        }
        if (HasException) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Exception);
        }
        if (HasCaughtUp) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, CaughtUp);
        }
        if (HasGaveUp) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, GaveUp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MasterMessageUnion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MasterMessageUnion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MasterMessageUnion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MasterMessageUnion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MasterMessageUnion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MasterMessageUnion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MasterMessageUnion ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MasterMessageUnion ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MasterMessageUnion prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<MasterMessageUnion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MasterMessageUnion result = new MasterMessageUnion();
      
      protected override MasterMessageUnion MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MasterMessageUnion();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return MasterMessageUnion.Descriptor; }
      }
      
      public override MasterMessageUnion DefaultInstanceForType {
        get { return MasterMessageUnion.DefaultInstance; }
      }
      
      public override MasterMessageUnion BuildPartial() {
        MasterMessageUnion returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MasterMessageUnion) {
          return MergeFrom((MasterMessageUnion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MasterMessageUnion other) {
        if (other == MasterMessageUnion.DefaultInstance) return this;
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasJoinRequest) {
          MergeJoinRequest(other.JoinRequest);
        }
        if (other.HasJoinResponse) {
          MergeJoinResponse(other.JoinResponse);
        }
        if (other.HasTopology) {
          MergeTopology(other.Topology);
        }
        if (other.HasException) {
          MergeException(other.Exception);
        }
        if (other.HasCaughtUp) {
          MergeCaughtUp(other.CaughtUp);
        }
        if (other.HasGaveUp) {
          MergeGaveUp(other.GaveUp);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Rhino.DistributedHashTable.Protocol.MasterMessageType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Type = (global::Rhino.DistributedHashTable.Protocol.MasterMessageType) rawValue;
              }
              break;
            }
            case 18: {
              global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.CreateBuilder();
              if (HasJoinRequest) {
                subBuilder.MergeFrom(JoinRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              JoinRequest = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.CreateBuilder();
              if (HasJoinResponse) {
                subBuilder.MergeFrom(JoinResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              JoinResponse = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.CreateBuilder();
              if (HasTopology) {
                subBuilder.MergeFrom(Topology);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Topology = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::Rhino.DistributedHashTable.Protocol.ErrorMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.ErrorMessage.CreateBuilder();
              if (HasException) {
                subBuilder.MergeFrom(Exception);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Exception = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage.CreateBuilder();
              if (HasCaughtUp) {
                subBuilder.MergeFrom(CaughtUp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CaughtUp = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage.CreateBuilder();
              if (HasGaveUp) {
                subBuilder.MergeFrom(GaveUp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GaveUp = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::Rhino.DistributedHashTable.Protocol.MasterMessageType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Rhino.DistributedHashTable.Protocol.MasterMessageType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::Rhino.DistributedHashTable.Protocol.MasterMessageType.GetTopologyRequest;
        return this;
      }
      
      public bool HasJoinRequest {
       get { return result.HasJoinRequest; }
      }
      public global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage JoinRequest {
        get { return result.JoinRequest; }
        set { SetJoinRequest(value); }
      }
      public Builder SetJoinRequest(global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasJoinRequest = true;
        result.joinRequest_ = value;
        return this;
      }
      public Builder SetJoinRequest(global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasJoinRequest = true;
        result.joinRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJoinRequest(global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasJoinRequest &&
            result.joinRequest_ != global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.DefaultInstance) {
            result.joinRequest_ = global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.CreateBuilder(result.joinRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.joinRequest_ = value;
        }
        result.hasJoinRequest = true;
        return this;
      }
      public Builder ClearJoinRequest() {
        result.hasJoinRequest = false;
        result.joinRequest_ = global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.DefaultInstance;
        return this;
      }
      
      public bool HasJoinResponse {
       get { return result.HasJoinResponse; }
      }
      public global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage JoinResponse {
        get { return result.JoinResponse; }
        set { SetJoinResponse(value); }
      }
      public Builder SetJoinResponse(global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasJoinResponse = true;
        result.joinResponse_ = value;
        return this;
      }
      public Builder SetJoinResponse(global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasJoinResponse = true;
        result.joinResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJoinResponse(global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasJoinResponse &&
            result.joinResponse_ != global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.DefaultInstance) {
            result.joinResponse_ = global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.CreateBuilder(result.joinResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.joinResponse_ = value;
        }
        result.hasJoinResponse = true;
        return this;
      }
      public Builder ClearJoinResponse() {
        result.hasJoinResponse = false;
        result.joinResponse_ = global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.DefaultInstance;
        return this;
      }
      
      public bool HasTopology {
       get { return result.HasTopology; }
      }
      public global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage Topology {
        get { return result.Topology; }
        set { SetTopology(value); }
      }
      public Builder SetTopology(global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTopology = true;
        result.topology_ = value;
        return this;
      }
      public Builder SetTopology(global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasTopology = true;
        result.topology_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTopology(global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasTopology &&
            result.topology_ != global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.DefaultInstance) {
            result.topology_ = global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.CreateBuilder(result.topology_).MergeFrom(value).BuildPartial();
        } else {
          result.topology_ = value;
        }
        result.hasTopology = true;
        return this;
      }
      public Builder ClearTopology() {
        result.hasTopology = false;
        result.topology_ = global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.DefaultInstance;
        return this;
      }
      
      public bool HasException {
       get { return result.HasException; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ErrorMessage Exception {
        get { return result.Exception; }
        set { SetException(value); }
      }
      public Builder SetException(global::Rhino.DistributedHashTable.Protocol.ErrorMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasException = true;
        result.exception_ = value;
        return this;
      }
      public Builder SetException(global::Rhino.DistributedHashTable.Protocol.ErrorMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasException = true;
        result.exception_ = builderForValue.Build();
        return this;
      }
      public Builder MergeException(global::Rhino.DistributedHashTable.Protocol.ErrorMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasException &&
            result.exception_ != global::Rhino.DistributedHashTable.Protocol.ErrorMessage.DefaultInstance) {
            result.exception_ = global::Rhino.DistributedHashTable.Protocol.ErrorMessage.CreateBuilder(result.exception_).MergeFrom(value).BuildPartial();
        } else {
          result.exception_ = value;
        }
        result.hasException = true;
        return this;
      }
      public Builder ClearException() {
        result.hasException = false;
        result.exception_ = global::Rhino.DistributedHashTable.Protocol.ErrorMessage.DefaultInstance;
        return this;
      }
      
      public bool HasCaughtUp {
       get { return result.HasCaughtUp; }
      }
      public global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage CaughtUp {
        get { return result.CaughtUp; }
        set { SetCaughtUp(value); }
      }
      public Builder SetCaughtUp(global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCaughtUp = true;
        result.caughtUp_ = value;
        return this;
      }
      public Builder SetCaughtUp(global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasCaughtUp = true;
        result.caughtUp_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCaughtUp(global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasCaughtUp &&
            result.caughtUp_ != global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage.DefaultInstance) {
            result.caughtUp_ = global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage.CreateBuilder(result.caughtUp_).MergeFrom(value).BuildPartial();
        } else {
          result.caughtUp_ = value;
        }
        result.hasCaughtUp = true;
        return this;
      }
      public Builder ClearCaughtUp() {
        result.hasCaughtUp = false;
        result.caughtUp_ = global::Rhino.DistributedHashTable.Protocol.CaughtUpRequestMessage.DefaultInstance;
        return this;
      }
      
      public bool HasGaveUp {
       get { return result.HasGaveUp; }
      }
      public global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage GaveUp {
        get { return result.GaveUp; }
        set { SetGaveUp(value); }
      }
      public Builder SetGaveUp(global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGaveUp = true;
        result.gaveUp_ = value;
        return this;
      }
      public Builder SetGaveUp(global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGaveUp = true;
        result.gaveUp_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGaveUp(global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGaveUp &&
            result.gaveUp_ != global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage.DefaultInstance) {
            result.gaveUp_ = global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage.CreateBuilder(result.gaveUp_).MergeFrom(value).BuildPartial();
        } else {
          result.gaveUp_ = value;
        }
        result.hasGaveUp = true;
        return this;
      }
      public Builder ClearGaveUp() {
        result.hasGaveUp = false;
        result.gaveUp_ = global::Rhino.DistributedHashTable.Protocol.GaveUpRequestMessage.DefaultInstance;
        return this;
      }
    }
  }
  
  public sealed partial class StorageMessageUnion : pb::GeneratedMessage<StorageMessageUnion, StorageMessageUnion.Builder> {
    private static readonly StorageMessageUnion defaultInstance = new Builder().BuildPartial();
    public static StorageMessageUnion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StorageMessageUnion DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override StorageMessageUnion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_StorageMessageUnion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StorageMessageUnion, StorageMessageUnion.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.ProtocolDef.internal__static_Rhino_DistributedHashTable_Protocol_StorageMessageUnion__FieldAccessorTable; }
    }
    
    private bool hasType;
    private global::Rhino.DistributedHashTable.Protocol.StorageMessageType type_ = global::Rhino.DistributedHashTable.Protocol.StorageMessageType.GetRequests;
    public bool HasType {
      get { return hasType; }
    }
    public global::Rhino.DistributedHashTable.Protocol.StorageMessageType Type {
      get { return type_; }
    }
    
    private bool hasTopologyVersion;
    private int? topologyVersion_ = 0;
    public bool HasTopologyVersion {
      get { return hasTopologyVersion && topologyVersion_.HasValue; }
    }
    public int? TopologyVersion {
      get { return topologyVersion_; }
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.GetRequestMessage> getRequests_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.GetRequestMessage>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.GetRequestMessage> GetRequestsList {
      get { return getRequests_; }
    }
    public int GetRequestsCount {
      get { return getRequests_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.GetRequestMessage GetGetRequests(int index) {
      return getRequests_[index];
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.PutRequestMessage> putRequests_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.PutRequestMessage>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.PutRequestMessage> PutRequestsList {
      get { return putRequests_; }
    }
    public int PutRequestsCount {
      get { return putRequests_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.PutRequestMessage GetPutRequests(int index) {
      return putRequests_[index];
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.PutResponseMessage> putResponses_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.PutResponseMessage>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.PutResponseMessage> PutResponsesList {
      get { return putResponses_; }
    }
    public int PutResponsesCount {
      get { return putResponses_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.PutResponseMessage GetPutResponses(int index) {
      return putResponses_[index];
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage> removeRequests_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage> RemoveRequestsList {
      get { return removeRequests_; }
    }
    public int RemoveRequestsCount {
      get { return removeRequests_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage GetRemoveRequests(int index) {
      return removeRequests_[index];
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage> removeRespones_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage> RemoveResponesList {
      get { return removeRespones_; }
    }
    public int RemoveResponesCount {
      get { return removeRespones_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage GetRemoveRespones(int index) {
      return removeRespones_[index];
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.GetResponseMessage> getResponses_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.GetResponseMessage>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.GetResponseMessage> GetResponsesList {
      get { return getResponses_; }
    }
    public int GetResponsesCount {
      get { return getResponses_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.GetResponseMessage GetGetResponses(int index) {
      return getResponses_[index];
    }
    
    private bool hasException;
    private global::Rhino.DistributedHashTable.Protocol.ErrorMessage exception_ = global::Rhino.DistributedHashTable.Protocol.ErrorMessage.DefaultInstance;
    public bool HasException {
      get { return hasException; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ErrorMessage Exception {
      get { return exception_; }
    }
    
    private bool hasAssignAllEmptySegmentsRequest;
    private global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage assignAllEmptySegmentsRequest_ = global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage.DefaultInstance;
    public bool HasAssignAllEmptySegmentsRequest {
      get { return hasAssignAllEmptySegmentsRequest; }
    }
    public global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage AssignAllEmptySegmentsRequest {
      get { return assignAllEmptySegmentsRequest_; }
    }
    
    private bool hasAssignAllEmptySegmentsResponse;
    private global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage assignAllEmptySegmentsResponse_ = global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage.DefaultInstance;
    public bool HasAssignAllEmptySegmentsResponse {
      get { return hasAssignAllEmptySegmentsResponse; }
    }
    public global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage AssignAllEmptySegmentsResponse {
      get { return assignAllEmptySegmentsResponse_; }
    }
    
    private bool hasReplicateNextPageRequest;
    private global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage replicateNextPageRequest_ = global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage.DefaultInstance;
    public bool HasReplicateNextPageRequest {
      get { return hasReplicateNextPageRequest; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage ReplicateNextPageRequest {
      get { return replicateNextPageRequest_; }
    }
    
    private bool hasReplicateNextPageResponse;
    private global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage replicateNextPageResponse_ = global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage.DefaultInstance;
    public bool HasReplicateNextPageResponse {
      get { return hasReplicateNextPageResponse; }
    }
    public global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage ReplicateNextPageResponse {
      get { return replicateNextPageResponse_; }
    }
    
    private bool hasSeeOtherError;
    private global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage seeOtherError_ = global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage.DefaultInstance;
    public bool HasSeeOtherError {
      get { return hasSeeOtherError; }
    }
    public global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage SeeOtherError {
      get { return seeOtherError_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        foreach (global::Rhino.DistributedHashTable.Protocol.GetRequestMessage element in GetRequestsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.PutRequestMessage element in PutRequestsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.PutResponseMessage element in PutResponsesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage element in RemoveRequestsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage element in RemoveResponesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.GetResponseMessage element in GetResponsesList) {
          if (!element.IsInitialized) return false;
        }
        if (HasException) {
          if (!Exception.IsInitialized) return false;
        }
        if (HasAssignAllEmptySegmentsRequest) {
          if (!AssignAllEmptySegmentsRequest.IsInitialized) return false;
        }
        if (HasReplicateNextPageRequest) {
          if (!ReplicateNextPageRequest.IsInitialized) return false;
        }
        if (HasReplicateNextPageResponse) {
          if (!ReplicateNextPageResponse.IsInitialized) return false;
        }
        if (HasSeeOtherError) {
          if (!SeeOtherError.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteEnum(1, (int) Type);
      }
      if (HasTopologyVersion) {
        output.WriteInt32(2, TopologyVersion.Value);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.GetRequestMessage element in GetRequestsList) {
        output.WriteMessage(3, element);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.PutRequestMessage element in PutRequestsList) {
        output.WriteMessage(4, element);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage element in RemoveRequestsList) {
        output.WriteMessage(5, element);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.GetResponseMessage element in GetResponsesList) {
        output.WriteMessage(6, element);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.PutResponseMessage element in PutResponsesList) {
        output.WriteMessage(7, element);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage element in RemoveResponesList) {
        output.WriteMessage(8, element);
      }
      if (HasException) {
        output.WriteMessage(9, Exception);
      }
      if (HasAssignAllEmptySegmentsRequest) {
        output.WriteMessage(10, AssignAllEmptySegmentsRequest);
      }
      if (HasAssignAllEmptySegmentsResponse) {
        output.WriteMessage(11, AssignAllEmptySegmentsResponse);
      }
      if (HasReplicateNextPageRequest) {
        output.WriteMessage(12, ReplicateNextPageRequest);
      }
      if (HasReplicateNextPageResponse) {
        output.WriteMessage(13, ReplicateNextPageResponse);
      }
      if (HasSeeOtherError) {
        output.WriteMessage(14, SeeOtherError);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (HasTopologyVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, TopologyVersion.Value);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.GetRequestMessage element in GetRequestsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.PutRequestMessage element in PutRequestsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.PutResponseMessage element in PutResponsesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage element in RemoveRequestsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage element in RemoveResponesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.GetResponseMessage element in GetResponsesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (HasException) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, Exception);
        }
        if (HasAssignAllEmptySegmentsRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, AssignAllEmptySegmentsRequest);
        }
        if (HasAssignAllEmptySegmentsResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, AssignAllEmptySegmentsResponse);
        }
        if (HasReplicateNextPageRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, ReplicateNextPageRequest);
        }
        if (HasReplicateNextPageResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, ReplicateNextPageResponse);
        }
        if (HasSeeOtherError) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, SeeOtherError);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StorageMessageUnion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StorageMessageUnion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StorageMessageUnion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StorageMessageUnion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StorageMessageUnion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StorageMessageUnion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StorageMessageUnion ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StorageMessageUnion ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StorageMessageUnion prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<StorageMessageUnion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      StorageMessageUnion result = new StorageMessageUnion();
      
      protected override StorageMessageUnion MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new StorageMessageUnion();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return StorageMessageUnion.Descriptor; }
      }
      
      public override StorageMessageUnion DefaultInstanceForType {
        get { return StorageMessageUnion.DefaultInstance; }
      }
      
      public override StorageMessageUnion BuildPartial() {
        result.getRequests_.MakeReadOnly();
        result.putRequests_.MakeReadOnly();
        result.putResponses_.MakeReadOnly();
        result.removeRequests_.MakeReadOnly();
        result.removeRespones_.MakeReadOnly();
        result.getResponses_.MakeReadOnly();
        StorageMessageUnion returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StorageMessageUnion) {
          return MergeFrom((StorageMessageUnion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StorageMessageUnion other) {
        if (other == StorageMessageUnion.DefaultInstance) return this;
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasTopologyVersion) {
          TopologyVersion = other.TopologyVersion;
        }
        if (other.getRequests_.Count != 0) {
          base.AddRange(other.getRequests_, result.getRequests_);
        }
        if (other.putRequests_.Count != 0) {
          base.AddRange(other.putRequests_, result.putRequests_);
        }
        if (other.putResponses_.Count != 0) {
          base.AddRange(other.putResponses_, result.putResponses_);
        }
        if (other.removeRequests_.Count != 0) {
          base.AddRange(other.removeRequests_, result.removeRequests_);
        }
        if (other.removeRespones_.Count != 0) {
          base.AddRange(other.removeRespones_, result.removeRespones_);
        }
        if (other.getResponses_.Count != 0) {
          base.AddRange(other.getResponses_, result.getResponses_);
        }
        if (other.HasException) {
          MergeException(other.Exception);
        }
        if (other.HasAssignAllEmptySegmentsRequest) {
          MergeAssignAllEmptySegmentsRequest(other.AssignAllEmptySegmentsRequest);
        }
        if (other.HasAssignAllEmptySegmentsResponse) {
          MergeAssignAllEmptySegmentsResponse(other.AssignAllEmptySegmentsResponse);
        }
        if (other.HasReplicateNextPageRequest) {
          MergeReplicateNextPageRequest(other.ReplicateNextPageRequest);
        }
        if (other.HasReplicateNextPageResponse) {
          MergeReplicateNextPageResponse(other.ReplicateNextPageResponse);
        }
        if (other.HasSeeOtherError) {
          MergeSeeOtherError(other.SeeOtherError);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Rhino.DistributedHashTable.Protocol.StorageMessageType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Type = (global::Rhino.DistributedHashTable.Protocol.StorageMessageType) rawValue;
              }
              break;
            }
            case 16: {
              TopologyVersion = input.ReadInt32();
              break;
            }
            case 26: {
              global::Rhino.DistributedHashTable.Protocol.GetRequestMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.GetRequestMessage.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddGetRequests(subBuilder.BuildPartial());
              break;
            }
            case 34: {
              global::Rhino.DistributedHashTable.Protocol.PutRequestMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.PutRequestMessage.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPutRequests(subBuilder.BuildPartial());
              break;
            }
            case 42: {
              global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddRemoveRequests(subBuilder.BuildPartial());
              break;
            }
            case 50: {
              global::Rhino.DistributedHashTable.Protocol.GetResponseMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.GetResponseMessage.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddGetResponses(subBuilder.BuildPartial());
              break;
            }
            case 58: {
              global::Rhino.DistributedHashTable.Protocol.PutResponseMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.PutResponseMessage.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPutResponses(subBuilder.BuildPartial());
              break;
            }
            case 66: {
              global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddRemoveRespones(subBuilder.BuildPartial());
              break;
            }
            case 74: {
              global::Rhino.DistributedHashTable.Protocol.ErrorMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.ErrorMessage.CreateBuilder();
              if (HasException) {
                subBuilder.MergeFrom(Exception);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Exception = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage.CreateBuilder();
              if (HasAssignAllEmptySegmentsRequest) {
                subBuilder.MergeFrom(AssignAllEmptySegmentsRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AssignAllEmptySegmentsRequest = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage.CreateBuilder();
              if (HasAssignAllEmptySegmentsResponse) {
                subBuilder.MergeFrom(AssignAllEmptySegmentsResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AssignAllEmptySegmentsResponse = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage.CreateBuilder();
              if (HasReplicateNextPageRequest) {
                subBuilder.MergeFrom(ReplicateNextPageRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReplicateNextPageRequest = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage.CreateBuilder();
              if (HasReplicateNextPageResponse) {
                subBuilder.MergeFrom(ReplicateNextPageResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReplicateNextPageResponse = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage.CreateBuilder();
              if (HasSeeOtherError) {
                subBuilder.MergeFrom(SeeOtherError);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeeOtherError = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::Rhino.DistributedHashTable.Protocol.StorageMessageType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Rhino.DistributedHashTable.Protocol.StorageMessageType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::Rhino.DistributedHashTable.Protocol.StorageMessageType.GetRequests;
        return this;
      }
      
      public bool HasTopologyVersion {
        get { return result.HasTopologyVersion; }
      }
      public int? TopologyVersion {
        get { return result.TopologyVersion; }
        set { SetTopologyVersion(value); }
      }
      public Builder SetTopologyVersion(int? value) {
        result.hasTopologyVersion = true;
        result.topologyVersion_ = value;
        return this;
      }
      public Builder ClearTopologyVersion() {
        result.hasTopologyVersion = false;
        result.topologyVersion_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.GetRequestMessage> GetRequestsList {
        get { return result.getRequests_; }
      }
      public int GetRequestsCount {
        get { return result.GetRequestsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.GetRequestMessage GetGetRequests(int index) {
        return result.GetGetRequests(index);
      }
      public Builder SetGetRequests(int index, global::Rhino.DistributedHashTable.Protocol.GetRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.getRequests_[index] = value;
        return this;
      }
      public Builder SetGetRequests(int index, global::Rhino.DistributedHashTable.Protocol.GetRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.getRequests_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGetRequests(global::Rhino.DistributedHashTable.Protocol.GetRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.getRequests_.Add(value);
        return this;
      }
      public Builder AddGetRequests(global::Rhino.DistributedHashTable.Protocol.GetRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.getRequests_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGetRequests(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.GetRequestMessage> values) {
        base.AddRange(values, result.getRequests_);
        return this;
      }
      public Builder ClearGetRequests() {
        result.getRequests_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.PutRequestMessage> PutRequestsList {
        get { return result.putRequests_; }
      }
      public int PutRequestsCount {
        get { return result.PutRequestsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.PutRequestMessage GetPutRequests(int index) {
        return result.GetPutRequests(index);
      }
      public Builder SetPutRequests(int index, global::Rhino.DistributedHashTable.Protocol.PutRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.putRequests_[index] = value;
        return this;
      }
      public Builder SetPutRequests(int index, global::Rhino.DistributedHashTable.Protocol.PutRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.putRequests_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPutRequests(global::Rhino.DistributedHashTable.Protocol.PutRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.putRequests_.Add(value);
        return this;
      }
      public Builder AddPutRequests(global::Rhino.DistributedHashTable.Protocol.PutRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.putRequests_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePutRequests(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.PutRequestMessage> values) {
        base.AddRange(values, result.putRequests_);
        return this;
      }
      public Builder ClearPutRequests() {
        result.putRequests_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.PutResponseMessage> PutResponsesList {
        get { return result.putResponses_; }
      }
      public int PutResponsesCount {
        get { return result.PutResponsesCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.PutResponseMessage GetPutResponses(int index) {
        return result.GetPutResponses(index);
      }
      public Builder SetPutResponses(int index, global::Rhino.DistributedHashTable.Protocol.PutResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.putResponses_[index] = value;
        return this;
      }
      public Builder SetPutResponses(int index, global::Rhino.DistributedHashTable.Protocol.PutResponseMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.putResponses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPutResponses(global::Rhino.DistributedHashTable.Protocol.PutResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.putResponses_.Add(value);
        return this;
      }
      public Builder AddPutResponses(global::Rhino.DistributedHashTable.Protocol.PutResponseMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.putResponses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePutResponses(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.PutResponseMessage> values) {
        base.AddRange(values, result.putResponses_);
        return this;
      }
      public Builder ClearPutResponses() {
        result.putResponses_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage> RemoveRequestsList {
        get { return result.removeRequests_; }
      }
      public int RemoveRequestsCount {
        get { return result.RemoveRequestsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage GetRemoveRequests(int index) {
        return result.GetRemoveRequests(index);
      }
      public Builder SetRemoveRequests(int index, global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.removeRequests_[index] = value;
        return this;
      }
      public Builder SetRemoveRequests(int index, global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.removeRequests_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRemoveRequests(global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.removeRequests_.Add(value);
        return this;
      }
      public Builder AddRemoveRequests(global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.removeRequests_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRemoveRequests(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.RemoveRequestMessage> values) {
        base.AddRange(values, result.removeRequests_);
        return this;
      }
      public Builder ClearRemoveRequests() {
        result.removeRequests_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage> RemoveResponesList {
        get { return result.removeRespones_; }
      }
      public int RemoveResponesCount {
        get { return result.RemoveResponesCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage GetRemoveRespones(int index) {
        return result.GetRemoveRespones(index);
      }
      public Builder SetRemoveRespones(int index, global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.removeRespones_[index] = value;
        return this;
      }
      public Builder SetRemoveRespones(int index, global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.removeRespones_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRemoveRespones(global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.removeRespones_.Add(value);
        return this;
      }
      public Builder AddRemoveRespones(global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.removeRespones_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRemoveRespones(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.RemoveResponseMessage> values) {
        base.AddRange(values, result.removeRespones_);
        return this;
      }
      public Builder ClearRemoveRespones() {
        result.removeRespones_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Rhino.DistributedHashTable.Protocol.GetResponseMessage> GetResponsesList {
        get { return result.getResponses_; }
      }
      public int GetResponsesCount {
        get { return result.GetResponsesCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.GetResponseMessage GetGetResponses(int index) {
        return result.GetGetResponses(index);
      }
      public Builder SetGetResponses(int index, global::Rhino.DistributedHashTable.Protocol.GetResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.getResponses_[index] = value;
        return this;
      }
      public Builder SetGetResponses(int index, global::Rhino.DistributedHashTable.Protocol.GetResponseMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.getResponses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGetResponses(global::Rhino.DistributedHashTable.Protocol.GetResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.getResponses_.Add(value);
        return this;
      }
      public Builder AddGetResponses(global::Rhino.DistributedHashTable.Protocol.GetResponseMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.getResponses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGetResponses(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.GetResponseMessage> values) {
        base.AddRange(values, result.getResponses_);
        return this;
      }
      public Builder ClearGetResponses() {
        result.getResponses_.Clear();
        return this;
      }
      
      public bool HasException {
       get { return result.HasException; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ErrorMessage Exception {
        get { return result.Exception; }
        set { SetException(value); }
      }
      public Builder SetException(global::Rhino.DistributedHashTable.Protocol.ErrorMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasException = true;
        result.exception_ = value;
        return this;
      }
      public Builder SetException(global::Rhino.DistributedHashTable.Protocol.ErrorMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasException = true;
        result.exception_ = builderForValue.Build();
        return this;
      }
      public Builder MergeException(global::Rhino.DistributedHashTable.Protocol.ErrorMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasException &&
            result.exception_ != global::Rhino.DistributedHashTable.Protocol.ErrorMessage.DefaultInstance) {
            result.exception_ = global::Rhino.DistributedHashTable.Protocol.ErrorMessage.CreateBuilder(result.exception_).MergeFrom(value).BuildPartial();
        } else {
          result.exception_ = value;
        }
        result.hasException = true;
        return this;
      }
      public Builder ClearException() {
        result.hasException = false;
        result.exception_ = global::Rhino.DistributedHashTable.Protocol.ErrorMessage.DefaultInstance;
        return this;
      }
      
      public bool HasAssignAllEmptySegmentsRequest {
       get { return result.HasAssignAllEmptySegmentsRequest; }
      }
      public global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage AssignAllEmptySegmentsRequest {
        get { return result.AssignAllEmptySegmentsRequest; }
        set { SetAssignAllEmptySegmentsRequest(value); }
      }
      public Builder SetAssignAllEmptySegmentsRequest(global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAssignAllEmptySegmentsRequest = true;
        result.assignAllEmptySegmentsRequest_ = value;
        return this;
      }
      public Builder SetAssignAllEmptySegmentsRequest(global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAssignAllEmptySegmentsRequest = true;
        result.assignAllEmptySegmentsRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAssignAllEmptySegmentsRequest(global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAssignAllEmptySegmentsRequest &&
            result.assignAllEmptySegmentsRequest_ != global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage.DefaultInstance) {
            result.assignAllEmptySegmentsRequest_ = global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage.CreateBuilder(result.assignAllEmptySegmentsRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.assignAllEmptySegmentsRequest_ = value;
        }
        result.hasAssignAllEmptySegmentsRequest = true;
        return this;
      }
      public Builder ClearAssignAllEmptySegmentsRequest() {
        result.hasAssignAllEmptySegmentsRequest = false;
        result.assignAllEmptySegmentsRequest_ = global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsRequestMessage.DefaultInstance;
        return this;
      }
      
      public bool HasAssignAllEmptySegmentsResponse {
       get { return result.HasAssignAllEmptySegmentsResponse; }
      }
      public global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage AssignAllEmptySegmentsResponse {
        get { return result.AssignAllEmptySegmentsResponse; }
        set { SetAssignAllEmptySegmentsResponse(value); }
      }
      public Builder SetAssignAllEmptySegmentsResponse(global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAssignAllEmptySegmentsResponse = true;
        result.assignAllEmptySegmentsResponse_ = value;
        return this;
      }
      public Builder SetAssignAllEmptySegmentsResponse(global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAssignAllEmptySegmentsResponse = true;
        result.assignAllEmptySegmentsResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAssignAllEmptySegmentsResponse(global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAssignAllEmptySegmentsResponse &&
            result.assignAllEmptySegmentsResponse_ != global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage.DefaultInstance) {
            result.assignAllEmptySegmentsResponse_ = global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage.CreateBuilder(result.assignAllEmptySegmentsResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.assignAllEmptySegmentsResponse_ = value;
        }
        result.hasAssignAllEmptySegmentsResponse = true;
        return this;
      }
      public Builder ClearAssignAllEmptySegmentsResponse() {
        result.hasAssignAllEmptySegmentsResponse = false;
        result.assignAllEmptySegmentsResponse_ = global::Rhino.DistributedHashTable.Protocol.AssignAllEmptySegmentsResponseMessage.DefaultInstance;
        return this;
      }
      
      public bool HasReplicateNextPageRequest {
       get { return result.HasReplicateNextPageRequest; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage ReplicateNextPageRequest {
        get { return result.ReplicateNextPageRequest; }
        set { SetReplicateNextPageRequest(value); }
      }
      public Builder SetReplicateNextPageRequest(global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReplicateNextPageRequest = true;
        result.replicateNextPageRequest_ = value;
        return this;
      }
      public Builder SetReplicateNextPageRequest(global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasReplicateNextPageRequest = true;
        result.replicateNextPageRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReplicateNextPageRequest(global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasReplicateNextPageRequest &&
            result.replicateNextPageRequest_ != global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage.DefaultInstance) {
            result.replicateNextPageRequest_ = global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage.CreateBuilder(result.replicateNextPageRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.replicateNextPageRequest_ = value;
        }
        result.hasReplicateNextPageRequest = true;
        return this;
      }
      public Builder ClearReplicateNextPageRequest() {
        result.hasReplicateNextPageRequest = false;
        result.replicateNextPageRequest_ = global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageRequestMessage.DefaultInstance;
        return this;
      }
      
      public bool HasReplicateNextPageResponse {
       get { return result.HasReplicateNextPageResponse; }
      }
      public global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage ReplicateNextPageResponse {
        get { return result.ReplicateNextPageResponse; }
        set { SetReplicateNextPageResponse(value); }
      }
      public Builder SetReplicateNextPageResponse(global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReplicateNextPageResponse = true;
        result.replicateNextPageResponse_ = value;
        return this;
      }
      public Builder SetReplicateNextPageResponse(global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasReplicateNextPageResponse = true;
        result.replicateNextPageResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReplicateNextPageResponse(global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasReplicateNextPageResponse &&
            result.replicateNextPageResponse_ != global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage.DefaultInstance) {
            result.replicateNextPageResponse_ = global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage.CreateBuilder(result.replicateNextPageResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.replicateNextPageResponse_ = value;
        }
        result.hasReplicateNextPageResponse = true;
        return this;
      }
      public Builder ClearReplicateNextPageResponse() {
        result.hasReplicateNextPageResponse = false;
        result.replicateNextPageResponse_ = global::Rhino.DistributedHashTable.Protocol.ReplicateNextPageResponseMessage.DefaultInstance;
        return this;
      }
      
      public bool HasSeeOtherError {
       get { return result.HasSeeOtherError; }
      }
      public global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage SeeOtherError {
        get { return result.SeeOtherError; }
        set { SetSeeOtherError(value); }
      }
      public Builder SetSeeOtherError(global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSeeOtherError = true;
        result.seeOtherError_ = value;
        return this;
      }
      public Builder SetSeeOtherError(global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSeeOtherError = true;
        result.seeOtherError_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeeOtherError(global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSeeOtherError &&
            result.seeOtherError_ != global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage.DefaultInstance) {
            result.seeOtherError_ = global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage.CreateBuilder(result.seeOtherError_).MergeFrom(value).BuildPartial();
        } else {
          result.seeOtherError_ = value;
        }
        result.hasSeeOtherError = true;
        return this;
      }
      public Builder ClearSeeOtherError() {
        result.hasSeeOtherError = false;
        result.seeOtherError_ = global::Rhino.DistributedHashTable.Protocol.SeeOtherErrorMessage.DefaultInstance;
        return this;
      }
    }
  }
  
  #endregion
  
}
