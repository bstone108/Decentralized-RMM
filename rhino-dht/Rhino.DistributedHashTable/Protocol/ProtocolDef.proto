package Rhino.DistributedHashTable.Protocol;

option optimize_for = SPEED;

enum StorageMessageType
{
	GetRequests = 1;
	PutRequests = 2;
	RemoveRequests = 3;
	GetResponses = 4;
	PutResponses = 5;
	RemoveResponses = 6;
	StorageErrorResult = 7;
	AssignAllEmptySegmentsRequest = 8;
	AssignAllEmptySegmentsResponse = 9;
	ReplicateNextPageRequest = 10;
	ReplicateNextPageResponse = 11;
	SeeOtherError = 12;
	TopologyChangedError = 13;
	UpdateTopology = 14;
	TopologyUpdated = 15;
}

enum MasterMessageType
{
	GetTopologyRequest = 1;
	GetTopologyResult = 2;
	JoinRequest = 3;
	JoinResult = 4;
	MasterErrorResult = 5;
	CaughtUpRequest = 6;
	CaughtUpResponse = 7;
	GaveUpRequest = 8;
	GaveUpResponse = 9;
}

enum ReplicationType
{
	Ownership = 1;
	Backup = 2;
}

message Value
{
	required string Key = 1;
	required double TimeStampAsDouble = 2;
	required ValueVersion Version = 3;
	required bool ReadOnly = 5;
	required bytes Data = 6;
	required bytes Sha256Hash = 7;
	repeated ValueVersion ParentVersions = 8;
	optional double ExpiresAtAsDouble = 10;
	optional int32 Tag = 11;
}

message NodeEndpoint
{
	required string Sync = 1;
	required string Async = 2;
}

message ValueVersion
{
	required int32 Number = 1;
	required bytes InstanceId = 2;
}

message Segment
{
	required int32 Index = 1;
	optional NodeEndpoint AssignedEndpoint = 2;
	optional NodeEndpoint InProcessOfMovingToEndpoint = 3;
	repeated NodeEndpoint PendingBackups = 4;
	repeated NodeEndpoint Backups = 5;
}

message JoinRequestMessage
{
	required NodeEndpoint EndpointJoining = 1;
}

message JoinResponseMessage
{
	repeated Segment Segments = 1;
}

message TopologyResultMessage
{
	required double TimestampAsDouble = 1;
	required int32 Version = 2;
	repeated Segment Segments = 3;
}

message CaughtUpRequestMessage
{
	required NodeEndpoint Endpoint = 1;
	repeated int32 CaughtUpSegments = 2;
	required ReplicationType Type = 3;
}

message GaveUpRequestMessage
{
	required NodeEndpoint Endpoint = 1;
	repeated int32 GaveUpSegments = 2;
	required ReplicationType Type = 3;
}

message GetRequestMessage
{
	required string Key = 1;
	required int32 Segment = 2;
	optional ValueVersion SpecificVersion = 3;
}

message GetResponseMessage
{
	repeated Value Values = 1;
}

message RemoveRequestMessage
{
	required string Key = 1;
	required int32 Segment = 2;
	required bool IsReplicationRequest = 4;
	optional ValueVersion SpecificVersion = 3;
}

message PutRequestMessage
{
	required string Key = 1;
	required int32 Segment = 2;
	repeated ValueVersion ParentVersions = 3;
	required bool OptimisticConcurrency = 4;
	required bool IsReadOnly = 5;
	required bytes Bytes = 6;
	required bool IsReplicationRequest =11;
	optional ValueVersion ReplicationVersion = 7;
	optional double ExpiresAtAsDouble = 8;
	optional double ReplicationTimeStampAsDouble = 9;
	optional int32 Tag = 10;
}

message PutResponseMessage
{
	required ValueVersion Version = 1;
	required bool ConflictExists = 2;
}

message RemoveResponseMessage
{
	required bool WasRemoved = 1;
}

message ErrorMessage
{
	required string Message = 1;
}

message AssignAllEmptySegmentsRequestMessage
{
	required NodeEndpoint ReplicationEndpoint = 1;
	repeated int32 Segments = 2;
	required ReplicationType Type = 3;
}

message AssignAllEmptySegmentsResponseMessage
{
	repeated int32 AssignedSegments = 2;
}

message ReplicateNextPageRequestMessage
{
	required NodeEndpoint ReplicationEndpoint = 1;
	required int32 Segment = 2;
	required ReplicationType Type = 3;
}

message ReplicateNextPageResponseMessage
{
	required bool Done = 1;
	repeated RemoveRequestMessage RemoveRequests = 2;
	repeated PutRequestMessage PutRequests = 3;
}

message SeeOtherErrorMessage
{
	required NodeEndpoint Other = 1;
}

message MasterMessageUnion
{	
	required MasterMessageType Type = 1;
	optional JoinRequestMessage JoinRequest = 2;
	optional JoinResponseMessage JoinResponse = 3;
	optional TopologyResultMessage Topology = 4;
	optional ErrorMessage Exception = 5;
	optional CaughtUpRequestMessage CaughtUp = 6;
	optional GaveUpRequestMessage GaveUp = 7;
}

message StorageMessageUnion
{
	required StorageMessageType Type = 1;
	optional int32 TopologyVersion = 2;
	repeated GetRequestMessage GetRequests = 3;
	repeated PutRequestMessage PutRequests = 4;
	repeated PutResponseMessage PutResponses = 7;
	repeated RemoveRequestMessage RemoveRequests = 5;
	repeated RemoveResponseMessage RemoveRespones = 8;
	repeated GetResponseMessage GetResponses = 6;
	optional ErrorMessage Exception = 9;
	optional AssignAllEmptySegmentsRequestMessage AssignAllEmptySegmentsRequest = 10;
	optional AssignAllEmptySegmentsResponseMessage AssignAllEmptySegmentsResponse = 11;
	optional ReplicateNextPageRequestMessage ReplicateNextPageRequest = 12;
	optional ReplicateNextPageResponseMessage ReplicateNextPageResponse = 13;
	optional SeeOtherErrorMessage SeeOtherError = 14;
}